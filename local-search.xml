<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>centos8  EOL 切换源</title>
    <link href="/2022/02/05/centos8%E5%88%87%E6%8D%A2%E6%BA%90/"/>
    <url>/2022/02/05/centos8%E5%88%87%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="centos8-EOL-切换源"><a href="#centos8-EOL-切换源" class="headerlink" title="centos8  EOL 切换源"></a>centos8  EOL 切换源</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>​    前段时间发现我的服务器的yum无法下载，一直是404错误：</p><p>![image-20220204143921148](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220204143921148.png)</p><p>​    经过苦苦查找才发现：</p><blockquote><p>CentOS 8操作系统版本结束了生命周期（EOL），Linux社区已不再维护该操作系统版本。</p><p>2021年12月31日CentOS 8 EOL。按照社区规则，CentOS 8的源地址<code>http://mirror.centos.org/centos/8/</code>内容已移除，目前第三方的镜像站中均已移除CentOS 8的源。</p></blockquote><p>​    <strong>centos8系列红帽已经停止维护了，默认的yum源已经下架</strong></p><p>​    所以只能更新我的yum源，操作如下：</p><h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h3><h4 id="2-1-登录CentOS-8系统的ECS实例"><a href="#2-1-登录CentOS-8系统的ECS实例" class="headerlink" title="2.1 登录CentOS 8系统的ECS实例"></a>2.1 登录CentOS 8系统的ECS实例</h4><h4 id="2-2-运行以下命令备份之前的repo文件"><a href="#2-2-运行以下命令备份之前的repo文件" class="headerlink" title="2.2 运行以下命令备份之前的repo文件"></a>2.2 运行以下命令备份之前的repo文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">rename <span class="hljs-string">&#x27;.repo&#x27;</span> <span class="hljs-string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo<br></code></pre></td></tr></table></figure><h4 id="2-3-运行以下命令下载最新的repo文件"><a href="#2-3-运行以下命令下载最新的repo文件" class="headerlink" title="2.3 运行以下命令下载最新的repo文件"></a>2.3 运行以下命令下载最新的repo文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo -O /etc/yum.repos.d/Centos-vault-8.5.2111.repo<br>wget https://mirrors.aliyun.com/repo/epel-archive-8.repo -O /etc/yum.repos.d/epel-archive-8.repo<br></code></pre></td></tr></table></figure><h4 id="2-4-运行以下命令替换repo文件中的链接"><a href="#2-4-运行以下命令替换repo文件中的链接" class="headerlink" title="2.4 运行以下命令替换repo文件中的链接"></a>2.4 运行以下命令替换repo文件中的链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/mirrors.cloud.aliyuncs.com/url_tmp/g&#x27;</span>  /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp;  sed -i <span class="hljs-string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp; sed -i <span class="hljs-string">&#x27;s/url_tmp/mirrors.aliyun.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo<br>sed -i <span class="hljs-string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/epel-archive-8.repo<br></code></pre></td></tr></table></figure><h4 id="2-5-运行以下命令重新创建缓存"><a href="#2-5-运行以下命令重新创建缓存" class="headerlink" title="2.5 运行以下命令重新创建缓存"></a>2.5 运行以下命令重新创建缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum clean all &amp;&amp; yum makecache<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pm2的使用（一）</title>
    <link href="/2022/01/27/pm2%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/27/pm2%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="pm2的使用（一）"><a href="#pm2的使用（一）" class="headerlink" title="pm2的使用（一）"></a>pm2的使用（一）</h2><ul><li><p>写在前边</p><ul><li><em>本文是针对pm2对<strong>NodeJS</strong>相关的应用</em></li></ul></li><li><p>pm2是什么</p></li></ul><blockquote><p>PM2 是一个守护进程管理器，可帮助您管理和保持应用程序在线。</p><p>PM2 入门非常简单，它以简单直观的 CLI 形式提供，可通过 NPM 安装。</p></blockquote><ul><li>为什么要使用pm2<ul><li>可以在后台轻松启动&#x2F;重新启动&#x2F;重新加载&#x2F;停止&#x2F;列出应用程序</li><li>保持应用程序在线</li><li>负载均衡，可以自由调配资源</li><li>日志管理，pm2系统日志和管理进程日志都可记录</li><li>清晰的图形化界面</li><li><strong>自动0秒重启</strong></li></ul></li></ul><hr><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// npm</span><br>npm install pm2@latest -g<br><span class="hljs-comment">// yarn</span><br>yarn <span class="hljs-built_in">global</span> add pm2<br></code></pre></td></tr></table></figure></blockquote><p>​        <strong>验证是否成功：在命令行中输入<code>pm2</code> 或者<code>pm2 -v</code></strong></p><p>![image-20220126165840732](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220126165840732.png)</p><hr><h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h3><p>​        说明：需要有一个可以启动的前端应用，Node程序，或者Vue项目、React项目都可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 start xxx.js<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引号内容为你前端项目的启动命令, 一定带引号，不然会报错的</span><br>pm2 start <span class="hljs-string">&quot;npm run serve&quot;</span><br></code></pre></td></tr></table></figure><p>​        **注意：输入以上命令的时候，你的命令行的路径必须是跟你的程序是在同一路径下！ **</p><p>​        执行成功后，即：</p><p>![image-20220126173037498](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220126173037498.png)</p><p>​        此时，如果打开我们在该程序写好的一些应用，例如：执行我们写好的接口；或者如果你执行的是命令行的话，就可以在页面输入：<code>localhost:8080</code> 发现是可以成功的。</p><p>​        你会发现，这和执行 <code>node xxx.js</code> 或者  <code>npm run server</code> 的效果是一样的，只是我们的命令行中没有像是监听的界面。</p><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h3><p>​        对的，当你走到这一步，pm2就可以来管理你绑定（或者叫做“启动”）的进程了。</p><p>​        非常<strong>简单</strong>和<strong>便捷</strong>！</p><p>​        接下来就是更深层的认识pm2的内容啦~</p><hr><h3 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h3><h5 id="4-1-查看启动列表"><a href="#4-1-查看启动列表" class="headerlink" title="4.1 查看启动列表"></a>4.1 查看启动列表</h5><p>​        此时你想查看你刚才绑定好的程序或者进程，可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 list<br><span class="hljs-comment">// 或者</span><br>pm2 ls<br><span class="hljs-comment">// 再或者</span><br>pm2 status<br></code></pre></td></tr></table></figure><p>![image-20220126174213415](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220126174213415.png)</p><h5 id="4-2-查看应用程序详情"><a href="#4-2-查看应用程序详情" class="headerlink" title="4.2 查看应用程序详情"></a>4.2 查看应用程序详情</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 show [应用程序名称 | 应用程序id]<br><br><span class="hljs-comment">// 我上边的程序则为： pm2 show server 或 pm2 show 0</span><br></code></pre></td></tr></table></figure><h5 id="4-3-停止指定应用"><a href="#4-3-停止指定应用" class="headerlink" title="4.3 停止指定应用"></a>4.3 停止指定应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 stop [应用程序名称 | 应用程序id] <span class="hljs-comment">// 停止单个</span><br>pm2 stop all <span class="hljs-comment">// 停止所有</span><br></code></pre></td></tr></table></figure><h5 id="4-4-重启应用程序"><a href="#4-4-重启应用程序" class="headerlink" title="4.4 重启应用程序"></a>4.4 重启应用程序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 reload [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 重启单个</span><br>pm2 restart [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 重启单个</span><br>pm2 reload all  <span class="hljs-comment">// 重启所有</span><br>pm2 restart all  <span class="hljs-comment">// 重启所有</span><br></code></pre></td></tr></table></figure><h5 id="4-5-删除应用程序"><a href="#4-5-删除应用程序" class="headerlink" title="4.5 删除应用程序"></a>4.5 删除应用程序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 <span class="hljs-keyword">delete</span> [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 删除单个</span><br>pm2 <span class="hljs-keyword">delete</span> all  <span class="hljs-comment">// 删除所有</span><br></code></pre></td></tr></table></figure><h5 id="4-6-实时监控各个程序cpu和内存使用情况"><a href="#4-6-实时监控各个程序cpu和内存使用情况" class="headerlink" title="4.6 实时监控各个程序cpu和内存使用情况"></a>4.6 实时监控各个程序cpu和内存使用情况</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 monit <span class="hljs-comment">// 非常好看的图形化界面</span><br></code></pre></td></tr></table></figure><p>![image-20220127105026876](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220127105026876.png)</p><h5 id="4-7-日志"><a href="#4-7-日志" class="headerlink" title="4.7  日志"></a>4.7  日志</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 logs [应用程序名称 | 应用程序id] <br>pm2 logs <span class="hljs-comment">// 查看所有日志</span><br></code></pre></td></tr></table></figure><p>​        以上为基本用到的一些命令，想查看更多，可移步官方文档：<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">PM2官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>pm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 使用 websocket 获取数据</title>
    <link href="/2022/01/02/React%20%E4%BD%BF%E7%94%A8%20websocket%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2022/01/02/React%20%E4%BD%BF%E7%94%A8%20websocket%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="React-使用-websocket-获取数据"><a href="#React-使用-websocket-获取数据" class="headerlink" title="React 使用 websocket 获取数据"></a>React 使用 websocket 获取数据</h2><blockquote><p>适用于<strong>实时数据</strong>，避免轮巡查询资源持续占有</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs tsx">npm install react-stomp<br>// 或者<br>yarn add react-stopm<br></code></pre></td></tr></table></figure><h4 id="2-引入资源"><a href="#2-引入资源" class="headerlink" title="2. 引入资源"></a>2. 引入资源</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> SockJsClient <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-stomp&#x27;</span><br></code></pre></td></tr></table></figure><p>![image-20220127141653893](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220127141653893.png)</p><h4 id="3-获取数据"><a href="#3-获取数据" class="headerlink" title="3.获取数据"></a>3.获取数据</h4><ul><li>首先你要有一个后端提供或者自己测试用的订阅地址</li><li>还需要一个订阅“主题”</li><li>请留意以下代码中<strong>注释</strong>部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 订阅成功后接收消息的回调函数</span><br>onMessage = <span class="hljs-function">(<span class="hljs-params">msg, topic</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 可以进行后续的逻辑处理</span><br>  <span class="hljs-built_in">console</span>.log(msg, topic)<br>&#125;<br><br>render () &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;previewClassName&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SockJsClient</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">url</span>=<span class="hljs-string">&#x27;http://xxxxxxxxxx&#x27;</span> // 订阅地址</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">topics</span>=<span class="hljs-string">&#123;[</span>`/<span class="hljs-attr">xxxxx</span>/$&#123;<span class="hljs-attr">xxxxxx</span>&#125;`]&#125;  // 订阅主题</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onMessage</span>=<span class="hljs-string">&#123;this.onMessage&#125;</span>  // 接收到消息的回调，可以写回调函数</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onDisconnect</span>=<span class="hljs-string">&#123;(err)</span> =&gt;</span> &#123; console.log(&#x27;连接失败&#x27;) &#125;&#125;</span><br><span class="xml">        /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript面向对象（二）</title>
    <link href="/2021/10/26/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%EF%BC%89/"/>
    <url>/2021/10/26/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、抽象类"><a href="#一、抽象类" class="headerlink" title="一、抽象类"></a>一、抽象类</h3><blockquote><p>通过关键字 <code>abstract</code>开头定义一个抽象类</p><p>抽象类和其它类区别不大，被专门用作继承的类，不能再被创作为实例的类</p><p>抽象类中的抽象方法，只能定义在抽象类中，子类必须对抽象方法进行重写</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-comment">//......</span><br><br>  <span class="hljs-keyword">abstract</span> sayHi(): <span class="hljs-built_in">void</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 子类如果不写此方法将会报错</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">// const an = new Animal() // 如果尝试去创建一个抽象类的实例，会报错！</span><br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog()<br><br>dog.sayHi() <span class="hljs-comment">// 汪汪汪！</span><br></code></pre></td></tr></table></figure><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><blockquote><p>通过关键字<code>interface</code>来定义接口</p></blockquote><blockquote><p>接口可以在定义<strong>类</strong>的时候，限制类的结构</p><p>接口中所有的<strong>属性</strong>，都不能有实际的值</p><p>接口中所有的<strong>方法</strong>，都是抽象方法</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> myInter &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  sayHello(): <span class="hljs-built_in">void</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h5><blockquote><p>通过关键字<code>implements</code>实现接口</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> myInter &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  sayHello(): <span class="hljs-built_in">void</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">haveInter</span> <span class="hljs-title">implements</span> <span class="hljs-title">myInter</span></span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>; <span class="hljs-comment">// 必须要有接口里的同名属性</span><br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br><br>​    <span class="hljs-built_in">this</span>.name = name<br><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">// 必须要有接口里的同名方法</span><br><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;哈哈哈哈&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript面向对象（一）</title>
    <link href="/2021/10/25/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E7%B1%BB%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%EF%BC%89/"/>
    <url>/2021/10/25/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E7%B1%BB%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在我们所说的程序中，或者说编程中。所有的对象都被分成了两个部分数据和功能，以人为例,人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。</p><p>数据在对象中被成为属性，而功能就被称为方法。所以简而言之,在程序中一切皆是对象。</p><blockquote><p>本文涉及：<strong>类</strong>、<strong>构造函数</strong>、<strong>继承</strong></p></blockquote><h3 id="一、类（class）"><a href="#一、类（class）" class="headerlink" title="一、类（class）"></a>一、类（class）</h3><blockquote><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。</p><p>要想创建对象，必须先定义类。</p><p>所谓的类，可以理解为对象的<strong>模型</strong></p></blockquote><h5 id="1-定义类"><a href="#1-定义类" class="headerlink" title="1.定义类"></a>1.定义类</h5><blockquote><p>通过<code>class</code>关键字定义类</p></blockquote><blockquote><p>直接定义的属性，是<code>实例属性</code></p><p>通过<code>static</code>关键字定义的属性是<code>类属性 </code>（或者叫静态属性）</p><p><code>readonly</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br><br>  属性名<span class="hljs-number">1</span>: 类型 = 值;<br><br>  属性名<span class="hljs-number">2</span>: 类型 = 值;<br><br>  <span class="hljs-keyword">static</span> 属性<span class="hljs-number">3</span>: 类型 = 值;<br><br>  .....;<br><br> <br><br>  方法名() &#123;<br><br>​    .....<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-comment">/*注：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*直接定义的属性，是【实例属性】，需要通过对象的实例去访问</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* const per = new Person()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* console.log(per.name)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*通过static关键字定义的属性是类属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* console.log(Person.age)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*方法同理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="2-举例"><a href="#2-举例" class="headerlink" title="2.举例"></a>2.举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;猴子&#x27;</span>;<br><br>  age: <span class="hljs-built_in">number</span> = <span class="hljs-number">29</span>;<br><br>  <span class="hljs-keyword">static</span> hobby: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;游戏&#x27;</span><br><br> <br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我最喜欢玩的英雄是：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>，我今年<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>岁`</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、构造函数（constructor）和this"><a href="#二、构造函数（constructor）和this" class="headerlink" title="二、构造函数（constructor）和this"></a>二、构造函数（constructor）和this</h3><blockquote><p>可以使用<code>constructor</code>定义一个构造器方法，构造函数会在对象创建时调用</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  age: <span class="hljs-built_in">number</span>;<br><br> <br><br>  <span class="hljs-title">constructor</span> (<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) &#123; <span class="hljs-comment">// 构造函数</span><br><br>​    <span class="hljs-comment">// 实例方法中，this 表示当前的实例</span><br><br>​    <span class="hljs-built_in">this</span>.name = name;<br><br>​    <span class="hljs-built_in">this</span>.age = age;<br><br>  &#125;;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 方法名</span><br><br>​    <span class="hljs-comment">// 方法中，通过this表示当前调用方法的对象</span><br><br>​    <span class="hljs-comment">// console.log(this.name)</span><br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">const</span> dog1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">const</span> dog2 = <span class="hljs-keyword">new</span> Dog( <span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">3</span>)<br><br> <br><br><span class="hljs-built_in">console</span>.log(dog1) <span class="hljs-comment">// Dog &#123;name: &#x27;小黑&#x27;, age: 2&#125;</span><br><br><span class="hljs-built_in">console</span>.log(dog2) <span class="hljs-comment">// Dog &#123;name: &#x27;小白&#x27;, age: 3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h3><blockquote><p><strong>子类</strong>通过<code>extends</code>关键字继承<strong>父类</strong>所有的属性和方法</p><p>如果子类和父类有同样的方法名，那么子类会覆盖父类的方法（这里说的覆盖，是指调用子类和父类同名方法时，只执行子类的方法）</p></blockquote><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  age: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">this</span>.name = name;<br><br>​    <span class="hljs-built_in">this</span>.age = age<br><br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物叫&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">2</span>)<br><br> <br><br><span class="hljs-built_in">console</span>.log(dog.sayHi()) <span class="hljs-comment">// 汪汪汪！</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果在子类中，继续调用父类的构造函数，<strong>必须</strong>要用<code>super()</code>进行调用，否则会报错</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)</span> &#123;<br><br>   <span class="hljs-built_in">super</span>(name, age)<br><br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TypeScript面向对象（二）（抽象类、接口） ⤵️</p><p><a href="https://www.jianshu.com/p/2d3ebbd869e0">TypeScript面向对象（二）（抽象类、接口）</a></p><hr><p><em>点个赞再走呗~</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript中的基础类型</title>
    <link href="/2021/10/24/TypeScript%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/10/24/TypeScript%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>TypeScript学习笔记（一）</p><h4 id="一、-类型声明"><a href="#一、-类型声明" class="headerlink" title="一、 类型声明"></a>一、 类型声明</h4><p>1.类型声明是ts中非常重要的特点；<br>2.通过类型声明，可以指定ts中的变量（包括：实参、形参）的类型；<br>3.指定类型后，当为变量赋值时，TS编译器会自动检测该值是否符合类型声明：符合则赋值，不符合则报错；<br>4.语法结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> 变量: 类型<br><span class="hljs-built_in">let</span> 变量: 类型 = 值<br><span class="hljs-keyword">function</span> fn(参数1: 类型, 参数2: 类型): 类型 &#123;<br>    // ****<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二、自动类型判断"><a href="#二、自动类型判断" class="headerlink" title="二、自动类型判断"></a>二、自动类型判断</h4><p>1.TS拥有自动类型判断的机制；<br>2.当变量的声明类型和赋值时同时进行的时候，ts编译器会自动判断变量的类型；<br>3.如果，我们对变量声明和赋值同时进行的时候，可以省略对该变量进行声明类型；</p><h4 id="三、类型"><a href="#三、类型" class="headerlink" title="三、类型"></a>三、类型</h4><p>1.总览</p><table><thead><tr><th>类型</th><th>举例</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>123, -123, 123.324, 0b1010</td><td>任意数字</td></tr><tr><td>String</td><td>‘abc’, ‘你好’</td><td>任意字符串</td></tr><tr><td>Boolean</td><td>true 和 false</td><td>布尔值</td></tr><tr><td>字面量</td><td>自己本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>Any</td><td>*</td><td>任意类型</td></tr><tr><td>Unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>Void</td><td>空值(undefined)</td><td>undefined</td></tr><tr><td>Never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>Object</td><td>{age: 123}</td><td>任意的js对象</td></tr><tr><td>Array</td><td>[1,2,3,4]</td><td>任意js数组</td></tr><tr><td>Tuple</td><td>[5,6]</td><td>元素，固定长度的数组，ts新增</td></tr><tr><td>Enum</td><td>enum {A, B}</td><td>枚举，ts新增</td></tr></tbody></table><p>2.举例</p><ul><li><strong>Number</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">let</span> b: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> c: <span class="hljs-built_in">number</span> = -<span class="hljs-number">34</span>;<br><span class="hljs-keyword">let</span> d: <span class="hljs-built_in">number</span> = <span class="hljs-number">23.424</span>;<br><span class="hljs-keyword">let</span> e: bigint = <span class="hljs-number">100n</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Boolean</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>String</strong></li></ul><blockquote><p>使用单引号（’）或双引号（”）来表示字符串类型。反引号（&#96;）来定义多行文本和内嵌表达式。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">let</span> color: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><br><span class="hljs-keyword">let</span> name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我&quot;</span>;<br><span class="hljs-keyword">let</span> years: <span class="hljs-built_in">number</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> words: <span class="hljs-built_in">string</span> = <span class="hljs-string">`大家好，今年是 <span class="hljs-subst">$&#123; name &#125;</span> 工作的第 <span class="hljs-subst">$&#123; years + <span class="hljs-number">1</span>&#125;</span> 周年`</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>字面量</strong></li></ul><blockquote><p>可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> color: <span class="hljs-string">&#x27;red&#x27;</span> | <span class="hljs-string">&#x27;blue&#x27;</span> | <span class="hljs-string">&#x27;black&#x27;</span>;<br><span class="hljs-keyword">let</span> num: <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Any</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span>;<br>a = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Unknown</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> noSure: unknown = <span class="hljs-number">4</span>;<br>noSure = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Void</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> no : <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><ul><li><strong>Never</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">never</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(msg);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Object</strong><br>略</li><li><strong>Array</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><ul><li><strong>Tuple</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">10</span>]; <br></code></pre></td></tr></table></figure><ul><li><strong>Enum</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Color &#123;<br>  Red,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br><span class="hljs-built_in">enum</span> Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br><span class="hljs-built_in">enum</span> Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green = <span class="hljs-number">2</span>,<br>  Blue = <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br></code></pre></td></tr></table></figure><h4 id="三、类型断言"><a href="#三、类型断言" class="headerlink" title="三、类型断言"></a>三、类型断言</h4><blockquote><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p></blockquote><ul><li>第一种</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length;<br></code></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).length;<br></code></pre></td></tr></table></figure><hr><p><em>点个赞再走呗~</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac端试试工具Royal使用方法</title>
    <link href="/2021/08/27/Royal%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/27/Royal%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这么说吧：<br>在 <strong>macOS</strong>上最好用 <strong>ssh工具</strong>客户端是Royal TSX</p><p><em>宇宙无敌！哈哈哈哈哈哈（轻喷</em></p><p>当然，它除了ssh工具，内部还集成，例如像TeamView、远程桌面等非常非常多强大的功能，这里只讲ssh工具的使用。</p></blockquote><blockquote><p>本文主题直接调至<strong>第三步</strong>，我这个是MacOS系统哈，windows系统可以止步。</p></blockquote><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>官网→<a href="https://royalapps.com/ts/mac/features">Royal Apps</a>可自行下载不同版本。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>忽略</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><h4 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h4><p><img src="https://upload-images.jianshu.io/upload_images/25281856-c0b79939d828c7ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.安装插件"></p><p>2.这里只安装了<strong>ssh</strong>和<strong>sftp</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-d011d7fd04e7e398.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.找到自己需要的插件"></p><h4 id="3-2-建立自己的Document-项目"><a href="#3-2-建立自己的Document-项目" class="headerlink" title="3.2 建立自己的Document(项目)"></a>3.2 建立自己的Document(项目)</h4><blockquote><p>注：免费版只能创建一个</p></blockquote><p>1.新建一个项目：File - New Document - 命名</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-f08507363e19a7d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.新建"></p><p>2.为刚创建的项目添加刚刚增加的两个插件</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-9e7639b1b04d0706.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.为项目选择插件"></p><h4 id="3-3-输入远程ssh账号密码"><a href="#3-3-输入远程ssh账号密码" class="headerlink" title="3.3 输入远程ssh账号密码"></a>3.3 输入远程ssh账号密码</h4><ol><li>输入别名，服务器ip，端口号：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-f8c3eaa391e5414c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.输入基础信息"></li><li>输入服务器密码：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-611380337b1bd9c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.输入账号密码"></li></ol><h4 id="3-4-sftp-是同理，找到sftp插件，输入账号密码即可"><a href="#3-4-sftp-是同理，找到sftp插件，输入账号密码即可" class="headerlink" title="3.4 sftp 是同理，找到sftp插件，输入账号密码即可"></a>3.4 sftp 是同理，找到sftp插件，输入账号密码即可</h4><h4 id="3-5-这里要介绍一个创建公共秘钥，可以使用此秘钥避免重复输入账号密码"><a href="#3-5-这里要介绍一个创建公共秘钥，可以使用此秘钥避免重复输入账号密码" class="headerlink" title="3.5 这里要介绍一个创建公共秘钥，可以使用此秘钥避免重复输入账号密码"></a>3.5 这里要介绍一个创建公共秘钥，可以使用此秘钥避免重复输入账号密码</h4><p>1.在你的项目中：<br>右键 - Add - Credential ：</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-0df9f26f582dfc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建秘钥"></p><p>2.输入账号、密码</p><blockquote><p>注：账户名和密码都要与你服务器的一致</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/25281856-26338c45a4bfb2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入你服务器账号密码"></p><p>3.连接的时候就可以选择自己创建好的公共秘钥</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-5a5e8600e7ac0be9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="4-连接成功"><a href="#4-连接成功" class="headerlink" title="4.连接成功"></a>4.连接成功</h2><p>以上成功后，ssh 和 sftp 就可正常连接了</p><p>​    <img src="https://upload-images.jianshu.io/upload_images/25281856-2a01aa7e86348097.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连接成功"></p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h2><blockquote><p>有时候会发现连接失败，还会出现连接后窗口闪退、秒关现象<br>如果重启还是失败，请重新下载安装<br>（哈哈哈哈哈，我出现过一次）</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 判断浏览器全屏</title>
    <link href="/2020/11/26/js%20%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%8F/"/>
    <url>/2020/11/26/js%20%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态"><a href="#前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态" class="headerlink" title="前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态"></a>前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态</h3><blockquote><p>基本原理：使用 <strong>Element.requestFullscreen()</strong> 方法发出异步请求使元素进入全屏模式<br>调用此API并不能保证元素一定能够进入全屏模式。<br>如果元素被允许进入全屏幕模式，返回的Promise会resolve，并且该元素会收到一个fullscreenchange事件，通知它已经进入全屏模式。<br>如果全屏请求被拒绝，返回的promise会变成rejected并且该元素会收到一个fullscreenerror事件。<br>如果该元素已经从原来的文档中分离，那么该文档将会收到这些事件。</p></blockquote><hr><h5 id="1-封装为公共方法"><a href="#1-封装为公共方法" class="headerlink" title="1. 封装为公共方法"></a>1. 封装为公共方法</h5><p>进入全屏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 进入全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fullScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> el = <span class="hljs-built_in">document</span>.documentElement;<br>    <span class="hljs-keyword">let</span> rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullscreen;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> rfs != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; rfs) &#123;<br>        rfs.call(el);<br>    &#125;;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>退出全屏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//退出全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exitScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.exitFullscreen) &#123;<br>        <span class="hljs-built_in">document</span>.exitFullscreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.mozCancelFullScreen) &#123;<br>        <span class="hljs-built_in">document</span>.mozCancelFullScreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.webkitCancelFullScreen) &#123;<br>        <span class="hljs-built_in">document</span>.webkitCancelFullScreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.msExitFullscreen) &#123;<br>        <span class="hljs-built_in">document</span>.msExitFullscreen();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cfs != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; cfs) &#123;<br>        cfs.call(el);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里增加一个方法，用来判断当前是否为全屏，使用起来更简单些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断是否为全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isFullScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span>  !! (<br>        <span class="hljs-built_in">document</span>.fullscreen || <br>        <span class="hljs-built_in">document</span>.mozFullScreen ||                         <br>        <span class="hljs-built_in">document</span>.webkitIsFullScreen ||       <br>        <span class="hljs-built_in">document</span>.webkitFullScreen || <br>        <span class="hljs-built_in">document</span>.msFullScreen <br>    );<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2. 具体使用"></a>2. 具体使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; fullScreen, exitScreen,  isFullScreen &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/getMaininfo&quot;</span>;<br><br>methods: &#123;<br>    <span class="hljs-comment">/* 是否为全屏 */</span><br>    <span class="hljs-function"><span class="hljs-title">screenClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!isFullScreen()) &#123;<br>        fullScreen();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        exitScreen();<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现时间实时更新</title>
    <link href="/2020/11/25/%E5%89%8D%E7%AB%AFjs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%88%E6%9E%9C/"/>
    <url>/2020/11/25/%E5%89%8D%E7%AB%AFjs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="前端js实现一个时间实时更新效果"><a href="#前端js实现一个时间实时更新效果" class="headerlink" title="前端js实现一个时间实时更新效果"></a>前端js实现一个时间实时更新效果</h3><p>按秒刷新，<strong>实现效果</strong>如图：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-cde760e9e392c532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="每秒刷新一次"></p><p>简单原理就是：</p><blockquote><p>封装一个时间格式的方法，加一个定时器，每秒去刷新一次，模拟成为时间更新效果</p></blockquote><hr><h4 id="1-封装公共方法"><a href="#1-封装公共方法" class="headerlink" title="1. 封装公共方法"></a>1. 封装公共方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeNow</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> vWeek, vWeek_s, year, month, day, hours, minutes, seconds;<br>    vWeek = [<span class="hljs-string">&quot;星期天&quot;</span>, <span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;星期二&quot;</span>, <span class="hljs-string">&quot;星期三&quot;</span>, <span class="hljs-string">&quot;星期四&quot;</span>, <span class="hljs-string">&quot;星期五&quot;</span>, <span class="hljs-string">&quot;星期六&quot;</span>];<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    year = date.getFullYear();<br>    month = date.getMonth() + <span class="hljs-number">1</span>;<br>    day = date.getDate();<br>    hours = date.getHours();<br>    hours = hours &gt; <span class="hljs-number">9</span> ? hours : <span class="hljs-string">&quot;0&quot;</span> + hours;<br>    minutes = date.getMinutes();<br>    minutes = minutes &gt; <span class="hljs-number">9</span> ? minutes : <span class="hljs-string">&quot;0&quot;</span> + minutes;<br>    seconds = date.getSeconds();<br>    seconds = seconds &gt; <span class="hljs-number">9</span> ? seconds : <span class="hljs-string">&quot;0&quot;</span> + seconds;<br>    vWeek_s = date.getDay();<br>    <span class="hljs-keyword">let</span> time = year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + hours + <span class="hljs-string">&quot;:&quot;</span> + minutes + <span class="hljs-string">&quot;:&quot;</span> + seconds + <span class="hljs-string">&quot;\t&quot;</span> + vWeek[vWeek_s];<br>    <span class="hljs-keyword">return</span> time<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以根据需求更改展现格式</p></blockquote><hr><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><p>引入：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;  timeNow &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/getMaininfo&quot;</span>;<br></code></pre></td></tr></table></figure><p>从页面加载起，开始执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.tiemEq = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">/* 时间 */</span><br>      <span class="hljs-built_in">this</span>.nowTime = timeNow();<br>   &#125;, <span class="hljs-number">1000</span>);<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：这里给定时器生成定义，以便后续销毁</p></blockquote><hr><h4 id="3-销毁"><a href="#3-销毁" class="headerlink" title="3. 销毁"></a>3. 销毁</h4><p>由于定时器的特殊性，在关闭页面时，及时销毁，避免造成资源浪费甚至内存溢出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vue生命周期</span><br><span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-comment">/* 关闭页面销毁所有定时器 */</span><br>   <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.tiemEq);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
