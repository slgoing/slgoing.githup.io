<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker基础（一）</title>
    <link href="/2022/06/01/Docker%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/06/01/Docker%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><h3 id="1-1镜像和容器的区别"><a href="#1-1镜像和容器的区别" class="headerlink" title="1.1镜像和容器的区别"></a>1.1镜像和容器的区别</h3><p><img src="https://i0.hdslb.com/bfs/album/5481900a85d445a7202870acd2b6425c35e1e37b.png" alt="区别"></p><blockquote><p>镜像像是一个包含了OS文件系统和应用的对象，类似虚拟机的模板（比如Window10镜像）。如果你是一个开发 者，可以把镜像看成面向对象编程中的只读类(read-only Class)。</p><p><strong>容器和镜像几乎一模一样，唯一的区别是镜像是只读的，而容器上面有一个可读写层。所以容器&#x3D;镜像+读写层。</strong></p></blockquote><h3 id="1-2Dokcer-Hup"><a href="#1-2Dokcer-Hup" class="headerlink" title="1.2Dokcer Hup"></a>1.2Dokcer Hup</h3><blockquote><p>Docker Hub 是Docker官方的镜像和社区，里边有很多开发者制作好的镜像，我们可以直接使用这些镜像。如果你有能力，也可以制作镜像，并上传到Docker Hub。</p></blockquote><h2 id="2-容器（container）"><a href="#2-容器（container）" class="headerlink" title="2.容器（container）"></a>2.容器（container）</h2><h3 id="2-1-容器相关命令"><a href="#2-1-容器相关命令" class="headerlink" title="2.1 容器相关命令"></a>2.1 容器相关命令</h3><table><thead><tr><th align="left">操作</th><th align="left">命令（全）</th></tr></thead><tbody><tr><td align="left">容器创建</td><td align="left">docker container run <name></td></tr><tr><td align="left">容器的列表（up）</td><td align="left">docker container ls</td></tr><tr><td align="left">容器的列表（up和exit）</td><td align="left">docker container ls -a</td></tr><tr><td align="left">容器的停止</td><td align="left">docker container stop <name or ID></td></tr><tr><td align="left">容器的删除</td><td align="left">docker container rm <name or ID></td></tr><tr><td align="left">容器的删除（全部）</td><td align="left">docker container rm $(docker container ls -aq)</td></tr></tbody></table><h3 id="2-2-attached-和-detached模式"><a href="#2-2-attached-和-detached模式" class="headerlink" title="2.2 attached 和 detached模式"></a>2.2 attached 和 detached模式</h3><blockquote><p>两种模式最简单的对比理解就是：<strong>attached</strong>模式在<strong>前台</strong>运行，<strong>detached</strong>模式在<strong>后台</strong>运行。</p></blockquote><ul><li><p><strong>attached</strong> 模式</p><p>用 <strong>Nginx</strong> 端口映射举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker container run -p 80:80 nginx<br></code></pre></td></tr></table></figure><p>第一个端口是映射到服务器本机的端口；第二个端口是Docker容器使用的端口。</p><p>比如你想把Docker的80端口，映射到服务器的90端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker container run -p 90:80 nginx<br></code></pre></td></tr></table></figure><p>此时无法继续输入命令。</p><p>如果这个时候，你关闭你的<code>shell</code>或者<code>ctrl+c</code>，这个容器就会被直接关掉，外部就无法访问了。</p></li><li><p><strong>detached</strong> 模式</p><p>开启方法：加一个参数<code>-d</code>或者<code>--detach</code></p><p>还是使用 <strong>Nginx</strong> 端口映射举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker container -d -p 80:80 nginx<br></code></pre></td></tr></table></figure><p>这次你会看到，和<code>attached</code>模式不同的是，这次输入完命令后，只显示出了容器的编号，并且可以再输入任何命令。</p><p>就算关掉窗口，容器依然运行，也就是它是在<strong>系统后台</strong>进行运行的。</p></li><li><p><strong>detached</strong> 模式转换成 <strong>attached</strong> 模式</p><p>当运行 <code>-d</code>模式后，如果需要调试或者其它需求，Dokcer 提供了转换，将<code>detached</code>转成<code>attached</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dcoker exec -it &lt;ID or Image&gt; sh<br></code></pre></td></tr></table></figure><blockquote><p><code>exec</code>是执行的意思，<code>-it</code>交互模式 ， <code>sh</code>交互的方式，用shell脚本进行交互</p></blockquote></li></ul><h2 id="3-镜像（image）"><a href="#3-镜像（image）" class="headerlink" title="3.镜像（image）"></a>3.镜像（image）</h2><h3 id="3-1-镜像获取的三个基本途径"><a href="#3-1-镜像获取的三个基本途径" class="headerlink" title="3.1 镜像获取的三个基本途径"></a>3.1 镜像获取的三个基本途径</h3><ul><li><p>Docker 社区（Registry）获取，<a href="https://hub.docker.com/">https://hub.docker.com/</a></p></li><li><p><code>Dockerfile</code>构建</p></li><li><p>自有文件导入</p></li><li><p>镜像相关命令：</p><table><thead><tr><th>操作</th><th>命令（全）</th></tr></thead><tbody><tr><td>查看镜像列表</td><td>docker image ls</td></tr><tr><td>查看具体镜像信息</td><td>docker image inspect<image ID></td></tr><tr><td>删除镜像</td><td>docker image rm <image id></td></tr></tbody></table></li></ul><h3 id="3-2-从dockerhub-上拉取"><a href="#3-2-从dockerhub-上拉取" class="headerlink" title="3.2 从dockerhub 上拉取"></a>3.2 从dockerhub 上拉取</h3><p>输入<code>docker image</code>后，会出现如下提示，包括命令：</p><p><img src="https://i0.hdslb.com/bfs/album/c1f549d32d097e31a2220ab238980303383da000.png@1e_1c.webp"></p><p>从dockerhub上，搜索到你想要的镜像，复制命令行就好了，比如<strong>Nginx</strong>:</p><p><img src="https://i0.hdslb.com/bfs/album/8c522901833e6997445f291800d9fd0b1e3d3253.png@1e_1c.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6解构常用总结</title>
    <link href="/2022/03/13/ES6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/13/ES6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ES6 允许按照一定模式从数组和对象中提取值，然后对变量进行赋值，被称为解构赋值</p></blockquote><h2 id="1-数组的解构赋值"><a href="#1-数组的解构赋值" class="headerlink" title="1.数组的解构赋值"></a>1.数组的解构赋值</h2><p>看下边两个例子就明白啦！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ①</span><br><span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(a,b,c)  <span class="hljs-comment">// 1 2 3</span><br><br><span class="hljs-comment">// 注意这里！ 如果等号右边不是数组，那么将报错！</span><br><br><br><span class="hljs-comment">// ②</span><br><span class="hljs-keyword">const</span> F4 = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-string">&#x27;唐僧&#x27;</span>, <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-string">&#x27;沙僧&#x27;</span>]<br><span class="hljs-keyword">let</span> [sun, tang, zhu, sha] = F4<br><span class="hljs-built_in">console</span>.log(sun, tang, zhu, sha) <span class="hljs-comment">// 孙悟空 唐僧 猪八戒 沙僧</span><br><br></code></pre></td></tr></table></figure><h2 id="2-对象的解构赋值"><a href="#2-对象的解构赋值" class="headerlink" title="2.对象的解构赋值"></a>2.对象的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xiyouji = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;18&#x27;</span>,<br>    <span class="hljs-attr">ball</span>: <span class="hljs-function">()=&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;金箍棒!&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123;name, age, ball&#125; = xiyouji<br><br><span class="hljs-built_in">console</span>.log(name)  <span class="hljs-comment">// 孙悟空</span><br><br><span class="hljs-built_in">console</span>.log(age)  <span class="hljs-comment">// 18</span><br><br><span class="hljs-built_in">console</span>.log(ball)  <br><br><span class="hljs-comment">//()=&gt; &#123;</span><br><span class="hljs-comment">//        console.log(&#x27;金箍棒!&#x27;)</span><br><span class="hljs-comment">//    &#125;</span><br><br><span class="hljs-comment">// 可以直接调用</span><br><span class="hljs-keyword">let</span> &#123;ball&#125; = xiyouji<br>ball()  <span class="hljs-comment">// 金箍棒!</span><br></code></pre></td></tr></table></figure><h2 id="3-字符串的解构赋值"><a href="#3-字符串的解构赋值" class="headerlink" title="3.字符串的解构赋值"></a>3.字符串的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// h</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// e</span><br><span class="hljs-built_in">console</span>.log(c)  <span class="hljs-comment">// l</span><br><span class="hljs-built_in">console</span>.log(d)  <span class="hljs-comment">// l</span><br><span class="hljs-built_in">console</span>.log(e)  <span class="hljs-comment">// o</span><br></code></pre></td></tr></table></figure><h2 id="4-用途（列举常用功能）"><a href="#4-用途（列举常用功能）" class="headerlink" title="4.用途（列举常用功能）"></a>4.用途（列举常用功能）</h2><h5 id="1）交换变量值"><a href="#1）交换变量值" class="headerlink" title="1）交换变量值"></a>1）交换变量值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span><br><br>[x, y] = [y, x]<br></code></pre></td></tr></table></figure><h5 id="2）提取JSON-数据"><a href="#2）提取JSON-数据" class="headerlink" title="2）提取JSON 数据"></a>2）提取JSON 数据</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jsonData = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-number">123</span>, <span class="hljs-number">456</span>]<br>&#125;<br><span class="hljs-keyword">let</span> &#123;id, status, data&#125; = jsonData<br><span class="hljs-built_in">console</span>.log(id, status, data)  <span class="hljs-comment">// 1 true  [123, 456]</span><br></code></pre></td></tr></table></figure><h4 id="3）遍历Map结构"><a href="#3）遍历Map结构" class="headerlink" title="3）遍历Map结构"></a>3）遍历Map结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()<br>map.set(<span class="hljs-string">&#x27;sunwukong&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br>map.set(<span class="hljs-string">&#x27;zhubajie&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key, val] <span class="hljs-keyword">of</span> map) &#123;<br>    <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&#x27;~~~&#x27;</span> + val)  <span class="hljs-comment">// sunwukong~~~hello  // zhubajie~~~world</span><br>&#125;<br><span class="hljs-comment">// 如果只想获取键: </span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key] <span class="hljs-keyword">of</span> map) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;键:&#x27;</span>+ key)  <span class="hljs-comment">// 键:sunwukong   // 键:zhubajie</span><br>&#125;<br><br><span class="hljs-comment">// 如果只想获取值: </span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [,val] <span class="hljs-keyword">of</span> map) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;值:&#x27;</span>+ val)  <span class="hljs-comment">// 值:hello  // 值:world</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia 安装和基本使用</title>
    <link href="/2022/03/13/Pinia%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/13/Pinia%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Pinia-安装和基本使用"><a href="#Pinia-安装和基本使用" class="headerlink" title="Pinia 安装和基本使用"></a>Pinia 安装和基本使用</h2><p><strong>本文是在 <code>Vue3 + TypeScript + Vite</code> 的开发环境上完成</strong></p><p>希望各位朋友可以通过此篇文章学懂 Pinia !</p><h3 id="一、-Pinia-简介"><a href="#一、-Pinia-简介" class="headerlink" title="一、 Pinia 简介"></a>一、 Pinia 简介</h3><p>官网：<a href="https://pinia.vuejs.org/">Pinia (vuejs.org)</a></p><blockquote><p>Pinia是Vue生态里Vuex的代替者，一个全新Vue的状态管理库。</p></blockquote><h3 id="二、-Pinia-优点"><a href="#二、-Pinia-优点" class="headerlink" title="二、 Pinia 优点"></a>二、 Pinia 优点</h3><ol><li>和 Vuex 对比，取消了<code>Mutations</code>操作，只有 <code>state</code> <code>getters</code> <code>actions</code> 简化状态库管理；</li><li>使用中不需要嵌套模块；</li><li>完全支持 TypeScript，Vue3的优势之一就是对TypeScript的支持呀。</li></ol><h3 id="三、-安装"><a href="#三、-安装" class="headerlink" title="三、 安装"></a>三、 安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> pinia<br></code></pre></td></tr></table></figure><p>或者使用 <code>yarn</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-builtin-name">add</span> pinia<br></code></pre></td></tr></table></figure><h3 id="四、-使用-Pinia-创建一个-Store-实例"><a href="#四、-使用-Pinia-创建一个-Store-实例" class="headerlink" title="四、 使用 Pinia 创建一个 Store 实例"></a>四、 使用 Pinia 创建一个 Store 实例</h3><p>安装后Pinia后，在我们的Vue项目中使用。</p><p>在我们的<code>main.ts</code>里边引入 <code>pinia</code>，并且实例化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span> <br>​<br><span class="hljs-keyword">const</span> pinia = createPinia()<br></code></pre></td></tr></table></figure><p>最后挂载vue实例上（完整代码）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br>​<br><span class="hljs-keyword">const</span> pinia = createPinia()<br><span class="hljs-keyword">const</span> app = createApp(App)<br>app.use(pinia)<br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br>​<br></code></pre></td></tr></table></figure><h3 id="五、-创建-Store-状态管理库"><a href="#五、-创建-Store-状态管理库" class="headerlink" title="五、 创建 Store 状态管理库"></a>五、 创建 Store 状态管理库</h3><p>默认情况下，我们会在 <code>/src</code>下创建一个 <code>/store</code>文件夹来专门设置状态管理库，用作于：</p><p>1）初始化定义状态；</p><p>2）修改仓库的 <code>state</code>；</p><p>3）对 <code>action</code>的使用。</p><p>创建 <code>/src/store/index.ts</code>:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br>​<br><span class="hljs-keyword">export</span> const mainStore = defineStore(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>    state: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;<br>    &#125;,<br>    getters: &#123;&#125;,<br>    actions: &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p><strong>解释：</strong></p><ul><li><code>defineStore()</code>：第一个参数，为容器的一个别名且<strong>此名字必须唯一，不能重复</strong>，第二个参数理解为配置对象</li><li><code>state</code>：用来存储全局状态</li><li><code>getters</code>：用来监听或者计算状态变化的，有缓存功能</li><li><code>actions</code>：用来对 state 里数据变化的业务逻辑，个人理解为，修改 state 全局状态数据的</li></ul></li></ul><h3 id="六、-在组件里读取-store"><a href="#六、-在组件里读取-store" class="headerlink" title="六、 在组件里读取 store"></a>六、 在组件里读取 store</h3><h4 id="1-在-store创建一个state"><a href="#1-在-store创建一个state" class="headerlink" title="1. 在 store创建一个state"></a>1. 在 <code>store</code>创建一个<code>state</code></h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br>​<br><span class="hljs-keyword">export</span> const mainStore = defineStore(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>    state: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          helloWorld: <span class="hljs-string">&#x27;Hello Pinia!&#x27;</span><br>        &#125;<br>    &#125;,<br>    getters: &#123;&#125;,<br>    actions: &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>在<code>/scr/components</code>里创建一个 <code>Hello.vue</code>的组件：</p><ul><li>先引入<code>mainStore</code>,得到 <code>store</code>的实例，就可以得到store里定义的状态数据了</li><li>在<code>/App.vue</code>中引入<code>Hellp.vue</code>组件（此步骤比较简单，不展示代码啦）</li><li>官方问题提供了<code>storeToRefs()</code>方法，方便我们解构使用，代码如下</li><li><strong>注意：</strong> 直接解构不是响应的，只有一次作用，大坑！</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">store.helloWorld</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>解构：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">helloWorld</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">​</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> store = mainStore()</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 解构：</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> &#123; helloWorld &#125; = storeToRefs(store)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">​</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-运行npm-run-dev-："><a href="#2-运行npm-run-dev-：" class="headerlink" title="2. 运行npm run dev ："></a>2. 运行<code>npm run dev</code> ：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92325788c52b43428f55705fd8ef0816~tplv-k3u1fbpfcp-watermark.image" alt="image-20220322155109805.png"></p><h3 id="七、-修改状态数据的几种方法"><a href="#七、-修改状态数据的几种方法" class="headerlink" title="七、 修改状态数据的几种方法"></a>七、 修改状态数据的几种方法</h3><h4 id="1-如同获取的方法"><a href="#1-如同获取的方法" class="headerlink" title="1. 如同获取的方法"></a>1. 如同获取的方法</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; mainStore &#125;</span><span class="xml"><span class="javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span>;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> store = mainStore()</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-comment">// 方法一</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> update = <span class="hljs-function">() =&gt;</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    store.helloWorld = &#x27;hello world&#x27;</span><br><span class="hljs-template-variable">  &#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-patch的两种方法"><a href="#2-patch的两种方法" class="headerlink" title="2. $patch的两种方法"></a>2. <code>$patch</code>的两种方法</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;script lang=&quot;ts&quot; setup&gt;</span><br>  import &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span>;<br>  <span class="hljs-keyword">const</span> store = mainStore()<br>  // 方法二<br>  <span class="hljs-keyword">const</span> handleClickPatch = () =&gt; &#123;<br>    store.<span class="hljs-variable">$patch</span>(&#123;<br>      helloWorld: &#x27;hello world =&gt; patch&#x27;<br>    &#125;)<br>  &#125;<br>  // 方法三-使用<span class="hljs-variable">$patch</span>回调函数<br>  <span class="hljs-keyword">const</span> handleClickMethod = () =&gt; &#123;<br>    store.<span class="hljs-variable">$patch</span>((<span class="hljs-keyword">state</span>)=&gt;&#123;<br>      <span class="hljs-keyword">state</span>.helloWorld = &#x27;hello world =&gt; method&#x27;<br>    &#125;)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-使用actions"><a href="#3-使用actions" class="headerlink" title="3. 使用actions"></a>3. 使用<code>actions</code></h4><p><strong>一定要注意<code>actions</code>中的<code>this</code>指向，不能使用箭头函数呐（老生常谈）</strong></p><ul><li>在<code>/store</code>中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = defineStore(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>    <span class="hljs-attr">state</span>: <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">helloWorld</span>: <span class="hljs-string">&#x27;Hello Pinia!&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;&#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>      <span class="hljs-function"><span class="hljs-title">actionChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.helloWorld = <span class="hljs-string">&#x27;hello world =&gt; actions&#x27;</span><br>        &#125;,<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>在<code>/Hello</code>中：</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; mainStore &#125;</span><span class="xml"><span class="javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span>;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> store = mainStore()</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-comment">// 方法四</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> handleClickActions = <span class="hljs-function">() =&gt;</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    store.actionChange()</span><br><span class="hljs-template-variable">  &#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="八、Getters的使用"><a href="#八、Getters的使用" class="headerlink" title="八、Getters的使用"></a>八、Getters的使用</h3><p>Pinia中的Getters和Vuex的计算属性几乎一致，暂时就不写啦，以后再来填坑。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite项目的创建</title>
    <link href="/2022/03/13/%E5%88%9B%E5%BB%BAVite%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/03/13/%E5%88%9B%E5%BB%BAVite%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vite-介绍"><a href="#1-vite-介绍" class="headerlink" title="1. vite 介绍"></a>1. vite 介绍</h2><p>中文社区：<a href="https://vitejs.cn/">https://vitejs.cn/</a></p><blockquote><p>Vite（法语意为 “快速的”，发音 <code>/vit/</code>，发音同 “veet”）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了 <a href="https://vitejs.cn/guide/features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="https://vitejs.cn/guide/features.html#hot-module-replacement">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul></blockquote><h3 id="vite打包优势："><a href="#vite打包优势：" class="headerlink" title="vite打包优势："></a>vite打包优势：</h3><ol><li><p>vite 通过es6 module 方式引入，而webpack通过先打包的方式</p></li><li><p>HMR 热模块更新，即不用刷新整个DOM</p></li><li><p>使用Rollup打包</p></li></ol><h2 id="2-构建vite项目"><a href="#2-构建vite项目" class="headerlink" title="2. 构建vite项目"></a>2. 构建vite项目</h2><p><code>npm</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init vite<br></code></pre></td></tr></table></figure><p><code>Yarn</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn create vite</span><br></code></pre></td></tr></table></figure><p>执行后操作：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.创建一个vite项目，并起名<br><span class="hljs-number">2</span>.选择 vue 的项目<br><span class="hljs-number">3</span>.选择 vue-<span class="hljs-keyword">ts</span><br><span class="hljs-number">4</span>.下载依赖 <br></code></pre></td></tr></table></figure><p>下载依赖： <code>npm install</code></p><p>启动项目： <code>npm run dev</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hugo部署到自己的云服务器</title>
    <link href="/2022/02/14/Hugo%20%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/02/14/Hugo%20%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Hugo-部署到自己服务器"><a href="#Hugo-部署到自己服务器" class="headerlink" title="Hugo 部署到自己服务器"></a>Hugo 部署到自己服务器</h2><blockquote><p>由于网上已经很多文章和教学关于Hugo部署到<code>GitHub</code>或者是<code>gitree</code>之类，比较少见Hugo部署自己的服务器，写下自己的部署过程。基础信息：</p><p>系统：macOS</p><p>云服务器：阿里云</p><p>部署方式：手动（非git）</p><p>安装工具：Homebrew，如果你没有<code>brew</code>，要先安装 Homebrew（ <a href="https://brew.sh/index_zh-cn">官网</a> ）</p><p>官方文档：<a href="https://www.gohugo.org/">Hugo中文文档</a></p></blockquote><p><strong>注：下边所有命令，都是在你项目的根目录执行</strong></p><h4 id="1-下载Hugo"><a href="#1-下载Hugo" class="headerlink" title="1. 下载Hugo"></a>1. 下载Hugo</h4><p>首先，找到一个<strong>安装的位置</strong>，然后执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>hugo<br></code></pre></td></tr></table></figure><h4 id="2-创建Hugo项目"><a href="#2-创建Hugo项目" class="headerlink" title="2. 创建Hugo项目"></a>2. 创建Hugo项目</h4><p>xxxx 为你的项目名</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hugo <span class="hljs-keyword">new</span> <span class="hljs-type">site</span> XXXXX<br></code></pre></td></tr></table></figure><h4 id="3-添加一个主题"><a href="#3-添加一个主题" class="headerlink" title="3. 添加一个主题"></a>3. 添加一个主题</h4><p>Hugo 的主题还是比较丰富的，这里（<a href="https://www.gohugo.org/theme/">皮肤列表 - Hugo中文文档 </a>）可以找到一个自己喜欢的，每个主题或者叫皮肤都有详细的安装介绍。</p><h4 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h4><p>在你的<code>config.toml</code>文件中，关键配置项：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 这个是关键：改为你的服务器或者服务器ip地址</span><br><span class="hljs-attr">baseURL</span> = <span class="hljs-string">&quot;XXXX&quot;</span><br><span class="hljs-comment"># [en, zh-cn, fr, ...] 设置默认的语言</span><br><span class="hljs-attr">defaultContentLanguage</span> = <span class="hljs-string">&quot;zh-cn&quot;</span><br><span class="hljs-comment"># 网站语言, 仅在这里 CN 大写</span><br><span class="hljs-attr">languageCode</span> = <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-comment"># 更改使用 Hugo 构建网站时使用的默认主题，即为你下载的主题</span><br><span class="hljs-attr">theme</span> = <span class="hljs-string">&quot;XXXX&quot;</span><br></code></pre></td></tr></table></figure><p>创建第一篇博客：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hugo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span>/<span class="hljs-keyword">first</span>.md<br></code></pre></td></tr></table></figure><p>配置完以上，就可以本地查看了：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hugo <span class="hljs-keyword">server</span> -D<br></code></pre></td></tr></table></figure><h4 id="5-打包"><a href="#5-打包" class="headerlink" title="5.打包"></a>5.打包</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hugo <span class="hljs-params">--theme=</span>你的主题 <span class="hljs-params">--baseUrl=</span><span class="hljs-string">&quot;你的服务器或者域名（这个有引号）&quot;</span> <span class="hljs-params">--buildDrafts</span><br></code></pre></td></tr></table></figure><h4 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h4><p>打包后，会生成一个<code>public</code>文件夹，只需要把这个文件夹，丢到你的服务器上，使用<code>nginx</code>配置下就可以正常访问了。</p><p><strong>举例，</strong> 我的nginx配置如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br>  <span class="hljs-keyword">location</span> /notes  &#123;<br>      <span class="hljs-keyword">alias</span>  /web/hugo/<span class="hljs-built_in">public</span>/;<br>      <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更改配置后，记得重启你的nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/<br>​<br>./nginx -s reload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos8 EOL 切换源</title>
    <link href="/2022/02/05/Centos8%E5%88%87%E6%8D%A2%E6%BA%90/"/>
    <url>/2022/02/05/Centos8%E5%88%87%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="centos8-EOL-切换源"><a href="#centos8-EOL-切换源" class="headerlink" title="centos8  EOL 切换源"></a>centos8  EOL 切换源</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>​    前段时间发现我的服务器的yum无法下载，一直是404错误：</p><p><img src="https://i0.hdslb.com/bfs/album/dd4407922660008eec4d17f864fade1fcfa8316f.png"></p><p>​    经过苦苦查找才发现：</p><blockquote><p>CentOS 8操作系统版本结束了生命周期（EOL），Linux社区已不再维护该操作系统版本。</p><p>2021年12月31日CentOS 8 EOL。按照社区规则，CentOS 8的源地址<code>http://mirror.centos.org/centos/8/</code>内容已移除，目前第三方的镜像站中均已移除CentOS 8的源。</p></blockquote><p>​    <strong>centos8系列红帽已经停止维护了，默认的yum源已经下架</strong></p><p>​    所以只能更新我的yum源，操作如下：</p><h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h3><h4 id="2-1-登录CentOS-8系统的ECS实例"><a href="#2-1-登录CentOS-8系统的ECS实例" class="headerlink" title="2.1 登录CentOS 8系统的ECS实例"></a>2.1 登录CentOS 8系统的ECS实例</h4><h4 id="2-2-运行以下命令备份之前的repo文件"><a href="#2-2-运行以下命令备份之前的repo文件" class="headerlink" title="2.2 运行以下命令备份之前的repo文件"></a>2.2 运行以下命令备份之前的repo文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename <span class="hljs-string">&#x27;.repo&#x27;</span> <span class="hljs-string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo<br></code></pre></td></tr></table></figure><h4 id="2-3-运行以下命令下载最新的repo文件"><a href="#2-3-运行以下命令下载最新的repo文件" class="headerlink" title="2.3 运行以下命令下载最新的repo文件"></a>2.3 运行以下命令下载最新的repo文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo -O /etc/yum.repos.d/Centos-vault-8.5.2111.repo<br>wget https://mirrors.aliyun.com/repo/epel-archive-8.repo -O /etc/yum.repos.d/epel-archive-8.repo<br></code></pre></td></tr></table></figure><h4 id="2-4-运行以下命令替换repo文件中的链接"><a href="#2-4-运行以下命令替换repo文件中的链接" class="headerlink" title="2.4 运行以下命令替换repo文件中的链接"></a>2.4 运行以下命令替换repo文件中的链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/mirrors.cloud.aliyuncs.com/url_tmp/g&#x27;</span>  /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp;  sed -i <span class="hljs-string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp; sed -i <span class="hljs-string">&#x27;s/url_tmp/mirrors.aliyun.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo<br>sed -i <span class="hljs-string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/epel-archive-8.repo<br></code></pre></td></tr></table></figure><h4 id="2-5-运行以下命令重新创建缓存"><a href="#2-5-运行以下命令重新创建缓存" class="headerlink" title="2.5 运行以下命令重新创建缓存"></a>2.5 运行以下命令重新创建缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum clean all &amp;&amp; yum makecache<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pm2 的使用</title>
    <link href="/2022/01/27/Pm2%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/01/27/Pm2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="pm2的使用"><a href="#pm2的使用" class="headerlink" title="pm2的使用"></a>pm2的使用</h2><ul><li><p>写在前边</p><ul><li><em>本文是针对pm2对<strong>NodeJS</strong>相关的应用</em></li></ul></li><li><p>pm2是什么</p></li></ul><blockquote><p>PM2 是一个守护进程管理器，可帮助您管理和保持应用程序在线。</p><p>PM2 入门非常简单，它以简单直观的 CLI 形式提供，可通过 NPM 安装。</p></blockquote><ul><li>为什么要使用pm2<ul><li>可以在后台轻松启动&#x2F;重新启动&#x2F;重新加载&#x2F;停止&#x2F;列出应用程序</li><li>保持应用程序在线</li><li>负载均衡，可以自由调配资源</li><li>日志管理，pm2系统日志和管理进程日志都可记录</li><li>清晰的图形化界面</li><li><strong>自动0秒重启</strong></li></ul></li></ul><hr><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// npm</span><br>npm install pm2@latest -g<br><span class="hljs-comment">// yarn</span><br>yarn <span class="hljs-built_in">global</span> add pm2<br></code></pre></td></tr></table></figure></blockquote><p>​        <strong>验证是否成功：在命令行中输入<code>pm2</code> 或者<code>pm2 -v</code></strong></p><p><img src="https://i0.hdslb.com/bfs/album/9381866ec12e2b24b2bc30b0aa2825eadb719b36.png"></p><hr><h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h3><p>​        说明：需要有一个可以启动的前端应用，Node程序，或者Vue项目、React项目都可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 start xxx.js<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引号内容为你前端项目的启动命令, 一定带引号，不然会报错的</span><br>pm2 start <span class="hljs-string">&quot;npm run serve&quot;</span><br></code></pre></td></tr></table></figure><p>​        **注意：输入以上命令的时候，你的命令行的路径必须是跟你的程序是在同一路径下！ **</p><p>​        执行成功后，即：</p><p><img src="https://i0.hdslb.com/bfs/album/05e4ef85f667cb6f8da3cf7c239e92810010dcaf.png"></p><p>​        此时，如果打开我们在该程序写好的一些应用，例如：执行我们写好的接口；或者如果你执行的是命令行的话，就可以在页面输入：<code>localhost:8080</code> 发现是可以成功的。</p><p>​        你会发现，这和执行 <code>node xxx.js</code> 或者  <code>npm run server</code> 的效果是一样的，只是我们的命令行中没有像是监听的界面。</p><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h3><p>​        对的，当你走到这一步，pm2就可以来管理你绑定（或者叫做“启动”）的进程了。</p><p>​        非常<strong>简单</strong>和<strong>便捷</strong>！</p><p>​        接下来就是更深层的认识pm2的内容啦~</p><hr><h3 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h3><h5 id="4-1-查看启动列表"><a href="#4-1-查看启动列表" class="headerlink" title="4.1 查看启动列表"></a>4.1 查看启动列表</h5><p>​        此时你想查看你刚才绑定好的程序或者进程，可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 list<br><span class="hljs-comment">// 或者</span><br>pm2 ls<br><span class="hljs-comment">// 再或者</span><br>pm2 status<br></code></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/26006315fd3228e2d65b5ecf3aa0c413735ef4bf.png"></p><h5 id="4-2-查看应用程序详情"><a href="#4-2-查看应用程序详情" class="headerlink" title="4.2 查看应用程序详情"></a>4.2 查看应用程序详情</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 show [应用程序名称 | 应用程序id]<br><br><span class="hljs-comment">// 我上边的程序则为： pm2 show server 或 pm2 show 0</span><br></code></pre></td></tr></table></figure><h5 id="4-3-停止指定应用"><a href="#4-3-停止指定应用" class="headerlink" title="4.3 停止指定应用"></a>4.3 停止指定应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 stop [应用程序名称 | 应用程序id] <span class="hljs-comment">// 停止单个</span><br>pm2 stop all <span class="hljs-comment">// 停止所有</span><br></code></pre></td></tr></table></figure><h5 id="4-4-重启应用程序"><a href="#4-4-重启应用程序" class="headerlink" title="4.4 重启应用程序"></a>4.4 重启应用程序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 reload [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 重启单个</span><br>pm2 restart [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 重启单个</span><br>pm2 reload all  <span class="hljs-comment">// 重启所有</span><br>pm2 restart all  <span class="hljs-comment">// 重启所有</span><br></code></pre></td></tr></table></figure><h5 id="4-5-删除应用程序"><a href="#4-5-删除应用程序" class="headerlink" title="4.5 删除应用程序"></a>4.5 删除应用程序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 <span class="hljs-keyword">delete</span> [应用程序名称 | 应用程序id]  <span class="hljs-comment">// 删除单个</span><br>pm2 <span class="hljs-keyword">delete</span> all  <span class="hljs-comment">// 删除所有</span><br></code></pre></td></tr></table></figure><h5 id="4-6-实时监控各个程序cpu和内存使用情况"><a href="#4-6-实时监控各个程序cpu和内存使用情况" class="headerlink" title="4.6 实时监控各个程序cpu和内存使用情况"></a>4.6 实时监控各个程序cpu和内存使用情况</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 monit <span class="hljs-comment">// 非常好看的图形化界面</span><br></code></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/2401729699a7ba41445646a583fe4eed442fc570.png"></p><h5 id="4-7-日志"><a href="#4-7-日志" class="headerlink" title="4.7  日志"></a>4.7  日志</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pm2 logs [应用程序名称 | 应用程序id] <br>pm2 logs <span class="hljs-comment">// 查看所有日志</span><br></code></pre></td></tr></table></figure><p>​        以上为基本用到的一些命令，想查看更多，可移步官方文档：<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">PM2官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 使用 websocket 获取数据</title>
    <link href="/2022/01/02/React%20%E4%BD%BF%E7%94%A8%20websocket%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2022/01/02/React%20%E4%BD%BF%E7%94%A8%20websocket%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="React-使用-websocket-获取数据"><a href="#React-使用-websocket-获取数据" class="headerlink" title="React 使用 websocket 获取数据"></a>React 使用 websocket 获取数据</h2><blockquote><p>适用于<strong>实时数据</strong>，避免轮巡查询资源持续占有</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx">npm install react-stomp<br>// 或者<br>yarn add react-stopm<br></code></pre></td></tr></table></figure><h4 id="2-引入资源"><a href="#2-引入资源" class="headerlink" title="2. 引入资源"></a>2. 引入资源</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> SockJsClient <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-stomp&#x27;</span><br></code></pre></td></tr></table></figure><p>![image-20220127141653893](&#x2F;Users&#x2F;doudou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220127141653893.png)</p><h4 id="3-获取数据"><a href="#3-获取数据" class="headerlink" title="3.获取数据"></a>3.获取数据</h4><ul><li>首先你要有一个后端提供或者自己测试用的订阅地址</li><li>还需要一个订阅“主题”</li><li>请留意以下代码中<strong>注释</strong>部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 订阅成功后接收消息的回调函数</span><br>onMessage = <span class="hljs-function">(<span class="hljs-params">msg, topic</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 可以进行后续的逻辑处理</span><br>  <span class="hljs-built_in">console</span>.log(msg, topic)<br>&#125;<br><br>render () &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;previewClassName&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SockJsClient</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">url</span>=<span class="hljs-string">&#x27;http://xxxxxxxxxx&#x27;</span> // 订阅地址</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">topics</span>=<span class="hljs-string">&#123;[</span>`/<span class="hljs-attr">xxxxx</span>/$&#123;<span class="hljs-attr">xxxxxx</span>&#125;`]&#125;  // 订阅主题</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onMessage</span>=<span class="hljs-string">&#123;this.onMessage&#125;</span>  // 接收到消息的回调，可以写回调函数</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onDisconnect</span>=<span class="hljs-string">&#123;(err)</span> =&gt;</span> &#123; console.log(&#x27;连接失败&#x27;) &#125;&#125;</span><br><span class="xml">        /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 多态的理解</title>
    <link href="/2021/12/22/Python%20%E5%A4%9A%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/12/22/Python%20%E5%A4%9A%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="1）基本"><a href="#1）基本" class="headerlink" title="1）基本"></a>1）基本</h3><ul><li>让具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同的内容（功能）的函数</li></ul><h3 id="2）特点"><a href="#2）特点" class="headerlink" title="2）特点"></a>2）特点</h3><ul><li>只关心对象的实例方法是否相同，不关心对象所属类型；</li><li>增加代码调用灵活性，通用性、兼容性强；</li></ul><h3 id="3）举例"><a href="#3）举例" class="headerlink" title="3）举例"></a>3）举例</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>b = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">4</span><br><span class="hljs-string">5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><ul><li><code>len()</code>方法，传入不同的参数，可以得到不同的结果</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 继承的理解</title>
    <link href="/2021/12/19/Python%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/12/19/Python%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="1）基本"><a href="#1）基本" class="headerlink" title="1）基本"></a>1）基本</h3><ul><li><p>继承是面向对象的三大特征之一 <strong>（继承，封装，多态）</strong></p></li><li><p>通过继承可以使一个类获取到其它类中的方法和属性</p></li><li><p>定义时，在类名后的括号指定当前类的 <strong>父类</strong>(超类，基类，super)</p></li></ul><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animals</span>:</span><br>name = <span class="hljs-string">&quot;dogs&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animals</span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bark</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chai</span>(<span class="hljs-params">Dog</span>):</span><br><span class="hljs-keyword">pass</span><br><br><br>d = Dog()<br>c = Chai()<br><span class="hljs-built_in">print</span>(d.name)<br><span class="hljs-built_in">print</span>(c.name)<br>c.bark()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">dogs</span><br><span class="hljs-string">dogs</span><br><span class="hljs-string">汪汪汪！</span><br><span class="hljs-string">&gt;&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">### 2）默认情况</span><br><br>*   在创建类时，如果**省略**（`<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxxx</span>:</span>`）了父类，则默认父类为<span class="hljs-built_in">object</span><br><br>   *   <span class="hljs-built_in">object</span>是所有类的父类，所有类都继承自<span class="hljs-built_in">object</span><br><br><span class="hljs-comment">### 3）`isinstance` 和 `issubclass`</span><br><br>*   <span class="hljs-built_in">isinstance</span>() 检查一个对象是否是另一个对象的实例<br><br>*   <span class="hljs-built_in">issubclass</span>() 检查一个类是否是另一个类的子类<br><br><span class="hljs-comment">### 4）重写</span><br><br>*   如果类中有同名的方法，实例在调用时，会先调用子类的方法，而不是父类的方法，这个特点就叫做**重写**<br><br>*   当我们调用一个对象的方法时，会优先去当前对象中寻找是否具有该方法<br><br>   *   如果有直接调用；<br><br>   *   如果没有去当前对象中的**父类**中寻找，如果父类中有则继续调用；<br><br>   *   如果该父类中没有，继续去该父类的父类中寻找，以此类推；<br><br>   *   直到找到**<span class="hljs-built_in">object</span>**，如果还是没有，则报错<br><br>*   举例<br><br>   &gt;```python<br>   &gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-params">Object</span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B</span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CCC&#x27;</span>)<br><br><br>c = C()<br>c.test()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">CCC</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>c.hello()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[报错error]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">### 5）`super()`</span><br><br>*   可直接获取当前类的父类<br><br>*   通过<span class="hljs-built_in">super</span>()返回对象调用父类方法时，不需要传递self<br><br><span class="hljs-comment">### 6）多重继承</span><br><br>*   类名 . __ bases __<br><br>*   多重继承可以为一个类同时指定多个父类<br><br>   *   可以在类名的（）后边添加多个类，实现多重继承<br><br>   *   多重继承会使子类同时拥有多个父类，并且会获取到所有父类的方法<br><br>*   举例<br><br>   &gt;```python<br>   &gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dad</span>:</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Dad&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-params">Dad</span>):</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br> self.__name__ = name<br><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test1</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B, A</span>):</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test1</span>(<span class="hljs-params">self</span>):</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CCCC&#x27;</span>)<br><br><br>b = B(<span class="hljs-string">&#x27;狗&#x27;</span>)<br>b.test()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">AAAA</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/25281856-4ca451c9b74b8b56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image-20211217154156121.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 类，创建类的理解</title>
    <link href="/2021/12/13/Python%20%E7%B1%BB%E3%80%81%E5%88%9B%E5%BB%BA%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/12/13/Python%20%E7%B1%BB%E3%80%81%E5%88%9B%E5%BB%BA%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p><strong>类</strong>，简单理解它就像一个图纸，类就是对象的图纸</p><p>类就是一个用来创建对象的对象！</p><p>类就是一个对象！</p><p>类是type类型的对象，定义类实际上就是定义了一个type类型的对象</p></blockquote><ul><li><p>类也称对象为类的实例（<code>instance</code>）</p></li><li><p>比如， int() float() bool() str() list() dict() … 这些都是类，只是这些都是python内部特有的类</p></li></ul><h4 id="1-创建类语法"><a href="#1-创建类语法" class="headerlink" title="1.创建类语法"></a>1.创建类语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>():</span><br><span class="hljs-keyword">pass</span><br>    <br><br>mc = MyClass() <span class="hljs-comment"># mc就是通过MyClass创建的对象，他们都是一类对象</span><br>mc_2 = MyClass()<br><br><span class="hljs-built_in">isinstance</span>(mc, MyClass) <span class="hljs-comment"># isinstance() 用来检查一个对象是否是一个类的实例</span><br><br>res = <span class="hljs-built_in">isinstance</span>(mc, MyClass)  <br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h4 id="2-类的属性和方法"><a href="#2-类的属性和方法" class="headerlink" title="2.类的属性和方法"></a>2.类的属性和方法</h4><ul><li><p>在类的代码块中，我们可以定义<strong>变量</strong>和<strong>函数</strong>（即称为<strong>方法</strong>）</p></li><li><p>在类中定义的变量，将会成为所有的实例的公共<strong>属性</strong></p></li><li><p>所有的<strong>实例</strong>都可以访问这些属性</p></li><li><p>所有的<strong>实例</strong>都可以通过 <code>对象.方法名()</code>形式调用</p></li><li><p>如果方法调用，默认会传递一个参数，所以方法中至少要定义一个<strong>形参</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hello</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！&#x27;</span>)<br><br><br>p1 = Person()<br>p1.say_hello()<br><span class="hljs-built_in">print</span>(p1.name)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">你好！</span><br><span class="hljs-string">孙悟空</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/25281856-de30d0f0754c5411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image-20211212174550625.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hello</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！%s&#x27;</span> % self.name)<br><br><br>p1 = Person()<br>p2 = Person()<br>p1.name = <span class="hljs-string">&#x27;p1&#x27;</span><br>p2.name = <span class="hljs-string">&#x27;p2&#x27;</span><br><br>p1.say_hello()<br>p2.say_hello()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">你好！p1</span><br><span class="hljs-string">你好！p2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-类的初始化"><a href="#3-类的初始化" class="headerlink" title="3.类的初始化"></a>3.类的初始化</h4><h5 id="1）创建类的流程"><a href="#1）创建类的流程" class="headerlink" title="1）创建类的流程"></a>1）创建类的流程</h5><blockquote><p>p1 &#x3D; Person() 的运行流程  1.创建一个变量  2.在内存中创建一个新对象</p><p>3.__ init __(self)方法执行  4.将对象的id赋值给变量</p></blockquote><ul><li><p>在类中可以定义一些特殊方法（魔术方法）</p></li><li><p>特殊方法都是以<code>__</code>开头，<code>__</code>结尾的方法</p></li><li><p>特殊方法不需要自己调用，特殊时刻自动调用</p></li><li><p>举例：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hello</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！%s&#x27;</span> % self.name)<br><br><br>p1 = Person()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="2）类的基本结构"><a href="#2）类的基本结构" class="headerlink" title="2）类的基本结构"></a>2）类的基本结构</h5><blockquote><p>class 类名([父类])</p><p>公共属性…</p><p> #  对象的初始化方法</p><p>def __ init __(self, xxx)</p><p>psss</p><p>#其它方法</p><p>def method_1 (self, xxx)</p><p>psss</p><p>def method_2 (self, xxx)</p><p>pass</p><p>…….</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hello</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！%s&#x27;</span> % self.name)<br><br><br>p1 = Person(<span class="hljs-string">&#x27;我是p1&#x27;</span>)<br><span class="hljs-built_in">print</span>(p1.name)<br>p1.say_hello()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">我是p1</span><br><span class="hljs-string">你好！我是p1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3）练习-—-创建一个狗狗的类"><a href="#3）练习-—-创建一个狗狗的类" class="headerlink" title="3）练习 — 创建一个狗狗的类"></a>3）练习 — 创建一个狗狗的类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, eat</span>):</span><br>        self.name = name<br>        self.age = age<br>        self.eat = eat<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eating</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27;在开心地吃着%s&#x27;</span> % self.eat)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s在快乐的奔跑呀&#x27;</span>% self.name)<br><br><br>dog = Dog(<span class="hljs-string">&#x27;大黄&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;骨头&#x27;</span>)<br>dog.eating()<br>dog.run()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">大黄在开心地吃着骨头</span><br><span class="hljs-string">大黄在快乐的奔跑呀</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 面向对象（二）</title>
    <link href="/2021/10/26/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%EF%BC%89/"/>
    <url>/2021/10/26/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、抽象类"><a href="#一、抽象类" class="headerlink" title="一、抽象类"></a>一、抽象类</h3><blockquote><p>通过关键字 <code>abstract</code>开头定义一个抽象类</p><p>抽象类和其它类区别不大，被专门用作继承的类，不能再被创作为实例的类</p><p>抽象类中的抽象方法，只能定义在抽象类中，子类必须对抽象方法进行重写</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-comment">//......</span><br><br>  <span class="hljs-keyword">abstract</span> sayHi(): <span class="hljs-built_in">void</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 子类如果不写此方法将会报错</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">// const an = new Animal() // 如果尝试去创建一个抽象类的实例，会报错！</span><br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog()<br><br>dog.sayHi() <span class="hljs-comment">// 汪汪汪！</span><br></code></pre></td></tr></table></figure><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><blockquote><p>通过关键字<code>interface</code>来定义接口</p></blockquote><blockquote><p>接口可以在定义<strong>类</strong>的时候，限制类的结构</p><p>接口中所有的<strong>属性</strong>，都不能有实际的值</p><p>接口中所有的<strong>方法</strong>，都是抽象方法</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> myInter &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  sayHello(): <span class="hljs-built_in">void</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h5><blockquote><p>通过关键字<code>implements</code>实现接口</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> myInter &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  sayHello(): <span class="hljs-built_in">void</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">haveInter</span> <span class="hljs-title">implements</span> <span class="hljs-title">myInter</span></span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>; <span class="hljs-comment">// 必须要有接口里的同名属性</span><br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br><br>​    <span class="hljs-built_in">this</span>.name = name<br><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">// 必须要有接口里的同名方法</span><br><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;哈哈哈哈&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 面向对象（一）</title>
    <link href="/2021/10/25/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E7%B1%BB%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%EF%BC%89/"/>
    <url>/2021/10/25/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E7%B1%BB%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在我们所说的程序中，或者说编程中。所有的对象都被分成了两个部分数据和功能，以人为例,人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。</p><p>数据在对象中被成为属性，而功能就被称为方法。所以简而言之,在程序中一切皆是对象。</p><blockquote><p>本文涉及：<strong>类</strong>、<strong>构造函数</strong>、<strong>继承</strong></p></blockquote><h3 id="一、类（class）"><a href="#一、类（class）" class="headerlink" title="一、类（class）"></a>一、类（class）</h3><blockquote><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。</p><p>要想创建对象，必须先定义类。</p><p>所谓的类，可以理解为对象的<strong>模型</strong></p></blockquote><h5 id="1-定义类"><a href="#1-定义类" class="headerlink" title="1.定义类"></a>1.定义类</h5><blockquote><p>通过<code>class</code>关键字定义类</p></blockquote><blockquote><p>直接定义的属性，是<code>实例属性</code></p><p>通过<code>static</code>关键字定义的属性是<code>类属性 </code>（或者叫静态属性）</p><p><code>readonly</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br><br>  属性名<span class="hljs-number">1</span>: 类型 = 值;<br><br>  属性名<span class="hljs-number">2</span>: 类型 = 值;<br><br>  <span class="hljs-keyword">static</span> 属性<span class="hljs-number">3</span>: 类型 = 值;<br><br>  .....;<br><br> <br><br>  方法名() &#123;<br><br>​    .....<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-comment">/*注：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*直接定义的属性，是【实例属性】，需要通过对象的实例去访问</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* const per = new Person()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* console.log(per.name)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*通过static关键字定义的属性是类属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">\* console.log(Person.age)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*方法同理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="2-举例"><a href="#2-举例" class="headerlink" title="2.举例"></a>2.举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;猴子&#x27;</span>;<br><br>  age: <span class="hljs-built_in">number</span> = <span class="hljs-number">29</span>;<br><br>  <span class="hljs-keyword">static</span> hobby: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;游戏&#x27;</span><br><br> <br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我最喜欢玩的英雄是：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>，我今年<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>岁`</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、构造函数（constructor）和this"><a href="#二、构造函数（constructor）和this" class="headerlink" title="二、构造函数（constructor）和this"></a>二、构造函数（constructor）和this</h3><blockquote><p>可以使用<code>constructor</code>定义一个构造器方法，构造函数会在对象创建时调用</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  age: <span class="hljs-built_in">number</span>;<br><br> <br><br>  <span class="hljs-title">constructor</span> (<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) &#123; <span class="hljs-comment">// 构造函数</span><br><br>​    <span class="hljs-comment">// 实例方法中，this 表示当前的实例</span><br><br>​    <span class="hljs-built_in">this</span>.name = name;<br><br>​    <span class="hljs-built_in">this</span>.age = age;<br><br>  &#125;;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 方法名</span><br><br>​    <span class="hljs-comment">// 方法中，通过this表示当前调用方法的对象</span><br><br>​    <span class="hljs-comment">// console.log(this.name)</span><br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">const</span> dog1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">const</span> dog2 = <span class="hljs-keyword">new</span> Dog( <span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">3</span>)<br><br> <br><br><span class="hljs-built_in">console</span>.log(dog1) <span class="hljs-comment">// Dog &#123;name: &#x27;小黑&#x27;, age: 2&#125;</span><br><br><span class="hljs-built_in">console</span>.log(dog2) <span class="hljs-comment">// Dog &#123;name: &#x27;小白&#x27;, age: 3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h3><blockquote><p><strong>子类</strong>通过<code>extends</code>关键字继承<strong>父类</strong>所有的属性和方法</p><p>如果子类和父类有同样的方法名，那么子类会覆盖父类的方法（这里说的覆盖，是指调用子类和父类同名方法时，只执行子类的方法）</p></blockquote><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  age: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">this</span>.name = name;<br><br>​    <span class="hljs-built_in">this</span>.age = age<br><br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物叫&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>​    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">2</span>)<br><br> <br><br><span class="hljs-built_in">console</span>.log(dog.sayHi()) <span class="hljs-comment">// 汪汪汪！</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果在子类中，继续调用父类的构造函数，<strong>必须</strong>要用<code>super()</code>进行调用，否则会报错</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)</span> &#123;<br><br>   <span class="hljs-built_in">super</span>(name, age)<br><br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪！&#x27;</span>)<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TypeScript面向对象（二）（抽象类、接口） ⤵️</p><p><a href="https://www.jianshu.com/p/2d3ebbd869e0">TypeScript面向对象（二）（抽象类、接口）</a></p><hr><p><em>点个赞再走呗~</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 中的基础类型</title>
    <link href="/2021/10/24/TypeScript%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/10/24/TypeScript%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>TypeScript学习笔记（一）</p><h4 id="一、-类型声明"><a href="#一、-类型声明" class="headerlink" title="一、 类型声明"></a>一、 类型声明</h4><p>1.类型声明是ts中非常重要的特点；<br>2.通过类型声明，可以指定ts中的变量（包括：实参、形参）的类型；<br>3.指定类型后，当为变量赋值时，TS编译器会自动检测该值是否符合类型声明：符合则赋值，不符合则报错；<br>4.语法结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> 变量: 类型<br><span class="hljs-built_in">let</span> 变量: 类型 = 值<br><span class="hljs-keyword">function</span> fn(参数1: 类型, 参数2: 类型): 类型 &#123;<br>    // ****<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二、自动类型判断"><a href="#二、自动类型判断" class="headerlink" title="二、自动类型判断"></a>二、自动类型判断</h4><p>1.TS拥有自动类型判断的机制；<br>2.当变量的声明类型和赋值时同时进行的时候，ts编译器会自动判断变量的类型；<br>3.如果，我们对变量声明和赋值同时进行的时候，可以省略对该变量进行声明类型；</p><h4 id="三、类型"><a href="#三、类型" class="headerlink" title="三、类型"></a>三、类型</h4><p>1.总览</p><table><thead><tr><th>类型</th><th>举例</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>123, -123, 123.324, 0b1010</td><td>任意数字</td></tr><tr><td>String</td><td>‘abc’, ‘你好’</td><td>任意字符串</td></tr><tr><td>Boolean</td><td>true 和 false</td><td>布尔值</td></tr><tr><td>字面量</td><td>自己本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>Any</td><td>*</td><td>任意类型</td></tr><tr><td>Unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>Void</td><td>空值(undefined)</td><td>undefined</td></tr><tr><td>Never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>Object</td><td>{age: 123}</td><td>任意的js对象</td></tr><tr><td>Array</td><td>[1,2,3,4]</td><td>任意js数组</td></tr><tr><td>Tuple</td><td>[5,6]</td><td>元素，固定长度的数组，ts新增</td></tr><tr><td>Enum</td><td>enum {A, B}</td><td>枚举，ts新增</td></tr></tbody></table><p>2.举例</p><ul><li><strong>Number</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">let</span> b: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> c: <span class="hljs-built_in">number</span> = -<span class="hljs-number">34</span>;<br><span class="hljs-keyword">let</span> d: <span class="hljs-built_in">number</span> = <span class="hljs-number">23.424</span>;<br><span class="hljs-keyword">let</span> e: bigint = <span class="hljs-number">100n</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Boolean</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>String</strong></li></ul><blockquote><p>使用单引号（’）或双引号（”）来表示字符串类型。反引号（&#96;）来定义多行文本和内嵌表达式。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">let</span> color: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><br><span class="hljs-keyword">let</span> name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我&quot;</span>;<br><span class="hljs-keyword">let</span> years: <span class="hljs-built_in">number</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> words: <span class="hljs-built_in">string</span> = <span class="hljs-string">`大家好，今年是 <span class="hljs-subst">$&#123; name &#125;</span> 工作的第 <span class="hljs-subst">$&#123; years + <span class="hljs-number">1</span>&#125;</span> 周年`</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>字面量</strong></li></ul><blockquote><p>可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> color: <span class="hljs-string">&#x27;red&#x27;</span> | <span class="hljs-string">&#x27;blue&#x27;</span> | <span class="hljs-string">&#x27;black&#x27;</span>;<br><span class="hljs-keyword">let</span> num: <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Any</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span>;<br>a = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Unknown</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> noSure: unknown = <span class="hljs-number">4</span>;<br>noSure = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>Void</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> no : <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><ul><li><strong>Never</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">never</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(msg);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Object</strong><br>略</li><li><strong>Array</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><ul><li><strong>Tuple</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">10</span>]; <br></code></pre></td></tr></table></figure><ul><li><strong>Enum</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Color &#123;<br>  Red,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br><span class="hljs-built_in">enum</span> Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br><span class="hljs-built_in">enum</span> Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green = <span class="hljs-number">2</span>,<br>  Blue = <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br></code></pre></td></tr></table></figure><h4 id="三、类型断言"><a href="#三、类型断言" class="headerlink" title="三、类型断言"></a>三、类型断言</h4><blockquote><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p></blockquote><ul><li>第一种</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length;<br></code></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).length;<br></code></pre></td></tr></table></figure><hr><p><em>点个赞再走呗~</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html元素增加角标</title>
    <link href="/2021/03/12/Html%E5%85%83%E7%B4%A0%E5%A2%9E%E5%8A%A0%E8%A7%92%E6%A0%87/"/>
    <url>/2021/03/12/Html%E5%85%83%E7%B4%A0%E5%A2%9E%E5%8A%A0%E8%A7%92%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>attr()</code> 理论上能用于所有的CSS属性但目前支持的仅有伪元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content"><code>content</code></a> 属性<br><strong>注意</strong>： 浏览器兼容性</p></blockquote><blockquote><p>语法：  attr( attribute-name <type-or-unit> )<br><em><attribute-name></em>  为属性<strong>名称</strong><br><em><type-or-unit></em>  表示所引用的属性值的<strong>单位</strong>，默认为：string, 可以为color，url都可以</p></blockquote><p><strong>demo如下：</strong><br>效果图：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-a8b7d84a66a6a25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加角标显示"><br>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html">// html <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/detailPng/01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/detailPng/02.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/detailPng/03.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/detailPng/04.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/detailPng/05.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>// css<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.tip</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(data-num);</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">23px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#416ba5</span>;</span><br><span class="css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">      <span class="hljs-attribute">top</span>: -<span class="hljs-number">75px</span>;</span><br><span class="css">      <span class="hljs-attribute">right</span>: -<span class="hljs-number">28px</span>;</span><br><span class="css">      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">6px</span> <span class="hljs-number">0px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript async和await的用法</title>
    <link href="/2021/02/05/JavaScript%20async%E5%92%8Cawait%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/02/05/JavaScript%20async%E5%92%8Cawait%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>建议：阅读本篇需要对<strong>Promise</strong>有一定的认识</p></blockquote><h3 id="1-含义和用法"><a href="#1-含义和用法" class="headerlink" title="1.含义和用法"></a>1.含义和用法</h3><p><strong>async</strong> 是一个修饰符，被它定义的函数会默认的<strong>返回</strong>一个 Promise 的 resolve的值。<br>因此对 async 函数可以直接进行 then 操作，返回的值即为 then() 方法的传入函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// demo</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo_1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br>demo_1().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <br>  <span class="hljs-built_in">console</span>.log(res)   <span class="hljs-comment">//  a， 1，</span><br>&#125;)  <br></code></pre></td></tr></table></figure><p><strong>await</strong>同 async 一样，作为修饰符，但是它只能放在 async 内部使用。<br>它是<strong>获取</strong> Promise 中返回的内容， 即这个 Promise 函数中 resolve 或者 reject 的值。</p><p>所以，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。<br>如下例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myFun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;test&#x27;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo_2</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-keyword">const</span> a = <span class="hljs-keyword">await</span> <span class="hljs-number">1</span><br>   <span class="hljs-keyword">const</span> b = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           resolve(<span class="hljs-string">&#x27;wait&#x27;</span>)<br>        &#125;, <span class="hljs-number">3000</span>)<br>   &#125;)<br>   <span class="hljs-keyword">const</span> c = <span class="hljs-keyword">await</span> myFun()<br>   <span class="hljs-built_in">console</span>.log(a, b, c)<br>&#125;<br><br>demo_2()<br><span class="hljs-comment">/* 打印结果：</span><br><span class="hljs-comment">  3秒后输出：  1，&quot;wait&quot; ,&quot;test&quot;,</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><hr><h3 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h3><p>比如说，这样一个场景：等待三个数据结果都返回，计算它们的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myFun2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val, time</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            resolve(val)<br>        &#125;, time)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> demo_3 = <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-keyword">await</span> myFun2(<span class="hljs-number">3</span>, <span class="hljs-number">5000</span>)<br>    <span class="hljs-built_in">console</span>.log(a)<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">await</span> myFun2(<span class="hljs-number">4</span>, <span class="hljs-number">10000</span>)<br>    <span class="hljs-built_in">console</span>.log(b)<br>    <span class="hljs-keyword">let</span> c =  <span class="hljs-keyword">await</span> myFun2(<span class="hljs-number">5</span>, <span class="hljs-number">15000</span>)<br>    <span class="hljs-built_in">console</span>.log(c)<br>    <span class="hljs-keyword">let</span> d = a + b +c  <br>    <span class="hljs-built_in">console</span>.log(d)<br>&#125;<br><br>demo_3()<br><span class="hljs-comment">/* 打印结果：</span><br><span class="hljs-comment">  5秒后输出：  3</span><br><span class="hljs-comment">  10秒后输出：  4</span><br><span class="hljs-comment">  15秒后输出：  5 12</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈JavaScript深拷贝和浅拷贝以及方法</title>
    <link href="/2021/02/05/%E6%B5%85%E8%B0%88js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/05/%E6%B5%85%E8%B0%88js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-现象"><a href="#1-现象" class="headerlink" title="1.现象"></a>1.现象</h3><p>一句话解释下它俩的区别：<br>假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着<strong>改变</strong>，说明这是<strong>浅拷贝</strong>；如果B<strong>没变</strong>，那就是<strong>深拷贝</strong>。</p><p>实际开发中遇到的其实就是这样疑惑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> a = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我是A&#x27;</span>&#125;<br><span class="hljs-keyword">let</span> b = a<br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// &#123;name: &quot;我是A&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// &#123;name: &quot;我是A&quot;&#125;</span><br><br>b.name = <span class="hljs-string">&#x27;我是B&#x27;</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// &#123;name: &quot;我是B&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// &#123;name: &quot;我是B&quot;&#125;</span><br><br><span class="hljs-comment">/*  为什么 a 的值也发生变化？  */</span><br><br></code></pre></td></tr></table></figure><p>这里需要解释下js中<strong>数据类型</strong> 以及<strong>堆栈</strong></p><hr><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><p><strong>基本数据类型</strong><br><em>String, Number,  Boolean,  Null,  Undefined,  Symbol</em><br><strong>引用数据类型</strong><br><em>Object, Array, Function, RegExp, Date</em> 等</p><p><strong>基本数据</strong>——类型它们键值都存在<strong>栈</strong>内存中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> b = a<br></code></pre></td></tr></table></figure><p>它们在内存中表现为：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-f183848cfc37cc89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="let a =1; let b = a "></p><p>所以说，<strong>基本数据类型</strong>做修改，修改a或者修改b不会对对方造成影响。</p><p>我们看下<strong>引用数据</strong>——键存在<strong>栈</strong>内存，值存在<strong>堆</strong>内存中：<br><strong>但是栈内存会提供一个引用的地址指向堆内存中的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">let</span> b = a<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/25281856-a4f9a7ba096ecc08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="let a = [0,1,2]"><br><br>当发生 b &#x3D; a 时，其实只是<strong>复制a的引用地址，而不是里边的值</strong>，如下图：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-f16b2690401c7bc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="let b = a"><br><br>这个时候当我们修改值的时候，其实也就是修改a和b指向的<strong>同一个地址</strong>，就是<strong>浅拷贝</strong>。如下图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">let</span> b = a<br>b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// [1, 1, 2]</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// [1, 1, 2]</span><br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/25281856-c63549552e2a3dd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="b[0] = 1"><br><br>所以，<strong>重新再堆内存中开辟一个新的地址</strong>存放b的值，就可以达到<strong>深拷贝</strong>的效果了：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-4d596e8accba2a9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开辟一个新的地址"><br>所以接下来讲就是深拷贝的方法了。</p><hr><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><ul><li><strong>Object.assign()</strong><blockquote><p>Object.assign(target, …sources);</p><p>target: 目标对象<br>sources: 源对象</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// demo</span><br><span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;<span class="hljs-attr">c</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">5</span>&#125;, obj1)<br><br><span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">//  &#123;a: 1, b: 2&#125;</span><br><span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">//  &#123;c: 4, d: 5, a: 1, b: 2&#125;</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>Array.prototype.concat()</strong><blockquote><p>var new_array &#x3D; old_array.concat(value1[, value2[, …[, valueN]]])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;A&#x27;</span> &#125;]<br><span class="hljs-keyword">let</span> arr2 = arr.concat()    <br>arr2[<span class="hljs-number">2</span>].name = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">// [1, 2, &#123; name: &#x27;B&#x27; &#125;]</span><br><span class="hljs-built_in">console</span>.log(arr2)  <span class="hljs-comment">// [1, 2, &#123; name: &#x27;B&#x27; &#125;]</span><br></code></pre></td></tr></table></figure></li><li><strong>Array.prototype.slice()</strong><blockquote><p>arr.slice()<br>arr.slice(begin)<br>arr.slice(begin, end)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;A&#x27;</span> &#125;]<br><span class="hljs-keyword">let</span> arr2 = arr.slice()    <br>arr2[<span class="hljs-number">2</span>].name = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">// [1, 2, &#123; name: &#x27;B&#x27; &#125;]</span><br><span class="hljs-built_in">console</span>.log(arr2)  <span class="hljs-comment">// [1, 2, &#123; name: &#x27;B&#x27; &#125;]</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>注意：以上方法对一维数组对象进行拷贝，也就是说，只有一层的时候它才是深拷贝</strong></p><ul><li><strong>JSON.parse(JSON.stringify())</strong><blockquote><p>用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，开辟一个新的地址，实现深拷贝</p></blockquote></li></ul><p><strong>但是，不可以拷贝 undefined, function,  RegExp 等</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(obj1);<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-built_in">JSON</span>.parse(str);<br>obj2.a = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(obj1.a);  <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(obj2.a); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><ul><li><strong>递归</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-comment">// 定义一个变量</span><br>    <span class="hljs-keyword">let</span> result;<br>    <span class="hljs-comment">// 如果当前需要深拷贝的是一个对象的话</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 如果是一个数组的话</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>            result = []; <span class="hljs-comment">// 将result赋值为一个数组，并且执行遍历</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> target) &#123;<br>                <span class="hljs-comment">// 递归克隆数组中的每一项</span><br>                result.push(deepClone(target[i]))<br>            &#125;<br>         <span class="hljs-comment">// 判断如果当前的值是null的话；直接赋值为null</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target===<span class="hljs-literal">null</span>) &#123;<br>            result = <span class="hljs-literal">null</span>;<br>         <span class="hljs-comment">// 判断如果当前的值是一个RegExp对象的话，直接赋值    </span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target.constructor===<span class="hljs-built_in">RegExp</span>)&#123;<br>            result = target;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span><br>            result = &#123;&#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> target) &#123;<br>                result[i] = deepClone(target[i]);<br>            &#125;<br>        &#125;<br>     <span class="hljs-comment">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        result = target;<br>    &#125;<br>     <span class="hljs-comment">// 返回最终结果</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>注：</strong>此方法虽然可以拷贝Function, null, undefined 等类型，但是不是很完善，使用要根据自己逻辑进行更改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise.all &amp;&amp; Promise.race</title>
    <link href="/2021/02/02/Promise.all%20&amp;&amp;%20Promise.race/"/>
    <url>/2021/02/02/Promise.all%20&amp;&amp;%20Promise.race/</url>
    
    <content type="html"><![CDATA[<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><blockquote><p>Promise.all 是将多个Promise的实例组成一个新的Promise实例。<br>当有成功值时，返回的是成功的数组。<br>当有失败值时，返回的是最先被reject捕捉到失败状态的值。</p></blockquote><p>上样例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> demo_1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;success---1&quot;</span>)<br>&#125;)<br><br><span class="hljs-keyword">let</span> demo_2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;success---2&quot;</span>)<br>&#125;)<br><br><span class="hljs-keyword">let</span> demo_3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;fail---1&quot;</span>)<br><br><span class="hljs-built_in">Promise</span>.all([demo_1, demo_2]).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(result)         <span class="hljs-comment">// [&#x27;success---1&#x27;, &#x27;success---2&#x27;]</span><br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(error)<br>&#125;)<br><br><span class="hljs-built_in">Promise</span>.all([demo_1, demo_2, demo_3]).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(result)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(error)      <span class="hljs-comment">// error &quot;fail---1&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>实际用途：</strong></p><p>1.Promise.all主要用于处理<strong>多个异步</strong>，比如，一个页面上需要等待多个接口数据回来以后才执行下边的方法，在此之前就可以用loading的样式。<br>2.由于 Promise.all 获得成功数据中数组顺序和接收数据的几个 Promise 顺序一致（上例中，demo_1 和 demo_2）。这样的话：在前端开发请求数据的过程中，如果遇到<strong>发送多个请求并根据请求顺序获取和使用数据</strong>的场景，使用 Promise.all 是一个很不错的选择。</p><hr><p>##Promise.race</p><blockquote><p>Promise.race([demo_1, demo_2, demo_3]) 中哪个结果返回的速度快，就返回哪个，不管结果本身是成功状态还是失败状态。</p></blockquote><p>这个场景使用比较少，根据实际情况使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue使用sockjs + stompjs进行websocket连接</title>
    <link href="/2020/12/11/Vue%20+%20Vuex%20+%20sockjs-client%20+%20stompjs%E8%BF%9B%E8%A1%8Cwebsocket%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/12/11/Vue%20+%20Vuex%20+%20sockjs-client%20+%20stompjs%E8%BF%9B%E8%A1%8Cwebsocket%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue使用sockjs-stompjs进行websocket连接"><a href="#Vue使用sockjs-stompjs进行websocket连接" class="headerlink" title="Vue使用sockjs + stompjs进行websocket连接"></a>Vue使用sockjs + stompjs进行websocket连接</h2><p>前不久遇到一个需求：实时读取硬件数据，在此作为技术点。<br>之前想的是使用，定时刷新请求接口来获取，但是数据实时性要求较高，这样难免有些麻烦。<br>这时候，websocket 就是一个不错的选择了。</p><hr><p>简单赘述下原理（想直接上手可跳过此部分）<br>这里只描述大概，具体详细原理可另行百度。</p><blockquote><p>由于WebSocket是html5出的<strong>协议</strong>，所以老版的浏览器是肯定不会支持的。<br>这里用到的<strong>Sock.js</strong> 就是用来兼容一些旧版本的浏览器。<br>而，STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。<br>简单地说，stomp是一个用于client之间进行异步消息传输的简单文本协议</p></blockquote><hr><h4 id="1-vue的使用方法"><a href="#1-vue的使用方法" class="headerlink" title="1.vue的使用方法"></a>1.vue的使用方法</h4><p>执行<strong>npm</strong> 命令行，如下：</p><blockquote><p>npm install sockjs-client –save<br>npm install stompjs –save</p></blockquote><h4 id="2-在vuex中创建"><a href="#2-在vuex中创建" class="headerlink" title="2.在vuex中创建"></a>2.在vuex中创建</h4><blockquote><p>这里说明一点，也可以不使用vuex，可以直接在组件或者单个项目生命周期使用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> SockJS <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;sockjs-client&#x27;</span>;<br><span class="hljs-keyword">import</span> Stomp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;stompjs&#x27;</span>;<br><br><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">tagValueList</span>: &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">tagListContent</span>(<span class="hljs-params">state, newValue</span>)</span> &#123;<br>    state.tagValueList = newValue<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>   <span class="hljs-comment">// 创建方法</span><br>  <span class="hljs-function"><span class="hljs-title">connect</span>(<span class="hljs-params">context</span>)</span> &#123;<br>    <span class="hljs-comment">//  创建连接</span><br>    <span class="hljs-keyword">let</span> socket = <span class="hljs-keyword">new</span> SockJS(<span class="hljs-string">&#x27;/xxxx/xxxx&#x27;</span>);  <span class="hljs-comment">// 这个地址要找你们后端</span><br>    <span class="hljs-keyword">let</span> stompClient = Stomp.over(socket);<br>    stompClient.connect(&#123;&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">frame</span>) </span>&#123;<br>      stompClient.subscribe(<span class="hljs-string">&#x27;/xxxx/xxxx&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">info</span>) </span>&#123; <span class="hljs-comment">// 这个地址要找你们后端</span><br>        <span class="hljs-keyword">let</span> receiveMsg = info.body<br>        context.commit(<span class="hljs-string">&#x27;tagListContent&#x27;</span>, receiveMsg)<br>      &#125;);<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>, <br>  state,<br>  mutations,<br>  actions<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样，我在全局任意都可以直接使用了</p><h4 id="3-页面中使用"><a href="#3-页面中使用" class="headerlink" title="3.页面中使用"></a>3.页面中使用</h4><p>由于我创建的是全局的实例对象，在watch中可以直接监听它的变化进行下一步操作了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> &#123; stomp &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>computed: &#123;<br>    stomp() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.$store.state.stomp.tagValueList<br>    &#125;<br> &#125;,<br>watch: &#123;<br>    stomp : function(<span class="hljs-keyword">val</span>) &#123;<br>       <span class="hljs-comment">// val 就是后端传过来的值了</span><br>       <span class="hljs-comment">// 逻辑代码</span><br>      console.log(<span class="hljs-keyword">val</span>)<br>    &#125;<br> &#125;<br>````<br>* * *<br>就这些，比较简单。<br>考虑到有些朋友可能不用这么复杂，我还是写一些**不用vuex**的方法吧！<br><br>#### <span class="hljs-number">4.</span>直接在生命周期中使用<br></code></pre></td></tr></table></figure><p>import SockJS from ‘sockjs-client’;<br>import Stomp from ‘stompjs’;</p><p>created:function(){<br>      let socket &#x3D; new SockJS(‘xx&#x2F;xx’);<br>      let stompClient &#x3D; Stomp.over(socket);<br>      stompClient.connect({}, function (frame) {<br>        stompClient.subscribe(‘&#x2F;topic&#x2F;eqp&#x2F;register’, function (info) {<br>          console.warn(info.body);<br>          console.warn(JSON.parse(info.body));<br>        });<br>      });<br>}</p><p>&#96;&#96;&#96;</p><h4 id="5-前端自己发送数据"><a href="#5-前端自己发送数据" class="headerlink" title="5.前端自己发送数据"></a>5.前端自己发送数据</h4><p>有些时候，为了便于测试，频繁地找后台开发的同学好像有些麻烦（会遭人烦 2333 -.-</p><p>所以我这里用的 <strong>MQTTX</strong> 这客户端软件自己进行测试<br>还是比较方便的</p><p>网上搜索很多的，mac用户在app store下载。<br>语言可以改为中文。</p><p><img src="https://upload-images.jianshu.io/upload_images/25281856-5e19f9acb559a67f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1140" alt="mqttx使用截图"></p><p>最后的最后，点个赞再走~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 判断浏览器全屏</title>
    <link href="/2020/11/26/JavaScript%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%8F/"/>
    <url>/2020/11/26/JavaScript%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态"><a href="#前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态" class="headerlink" title="前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态"></a>前端使用js让浏览器进入全屏状态，退出全屏状态，以及判断是否为全屏状态</h3><blockquote><p>基本原理：使用 <strong>Element.requestFullscreen()</strong> 方法发出异步请求使元素进入全屏模式<br>调用此API并不能保证元素一定能够进入全屏模式。<br>如果元素被允许进入全屏幕模式，返回的Promise会resolve，并且该元素会收到一个fullscreenchange事件，通知它已经进入全屏模式。<br>如果全屏请求被拒绝，返回的promise会变成rejected并且该元素会收到一个fullscreenerror事件。<br>如果该元素已经从原来的文档中分离，那么该文档将会收到这些事件。</p></blockquote><hr><h5 id="1-封装为公共方法"><a href="#1-封装为公共方法" class="headerlink" title="1. 封装为公共方法"></a>1. 封装为公共方法</h5><p>进入全屏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 进入全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fullScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> el = <span class="hljs-built_in">document</span>.documentElement;<br>    <span class="hljs-keyword">let</span> rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullscreen;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> rfs != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; rfs) &#123;<br>        rfs.call(el);<br>    &#125;;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>退出全屏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//退出全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exitScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.exitFullscreen) &#123;<br>        <span class="hljs-built_in">document</span>.exitFullscreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.mozCancelFullScreen) &#123;<br>        <span class="hljs-built_in">document</span>.mozCancelFullScreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.webkitCancelFullScreen) &#123;<br>        <span class="hljs-built_in">document</span>.webkitCancelFullScreen();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.msExitFullscreen) &#123;<br>        <span class="hljs-built_in">document</span>.msExitFullscreen();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cfs != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; cfs) &#123;<br>        cfs.call(el);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里增加一个方法，用来判断当前是否为全屏，使用起来更简单些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断是否为全屏</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isFullScreen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span>  !! (<br>        <span class="hljs-built_in">document</span>.fullscreen || <br>        <span class="hljs-built_in">document</span>.mozFullScreen ||                         <br>        <span class="hljs-built_in">document</span>.webkitIsFullScreen ||       <br>        <span class="hljs-built_in">document</span>.webkitFullScreen || <br>        <span class="hljs-built_in">document</span>.msFullScreen <br>    );<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2. 具体使用"></a>2. 具体使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; fullScreen, exitScreen,  isFullScreen &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/getMaininfo&quot;</span>;<br><br>methods: &#123;<br>    <span class="hljs-comment">/* 是否为全屏 */</span><br>    <span class="hljs-function"><span class="hljs-title">screenClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!isFullScreen()) &#123;<br>        fullScreen();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        exitScreen();<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 原生时间实时更新小组件</title>
    <link href="/2020/11/25/%E5%89%8D%E7%AB%AFjs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%88%E6%9E%9C/"/>
    <url>/2020/11/25/%E5%89%8D%E7%AB%AFjs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="前端js实现一个时间实时更新效果"><a href="#前端js实现一个时间实时更新效果" class="headerlink" title="前端js实现一个时间实时更新效果"></a>前端js实现一个时间实时更新效果</h3><p>按秒刷新，<strong>实现效果</strong>如图：<br><img src="https://upload-images.jianshu.io/upload_images/25281856-cde760e9e392c532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="每秒刷新一次"></p><p>简单原理就是：</p><blockquote><p>封装一个时间格式的方法，加一个定时器，每秒去刷新一次，模拟成为时间更新效果</p></blockquote><hr><h4 id="1-封装公共方法"><a href="#1-封装公共方法" class="headerlink" title="1. 封装公共方法"></a>1. 封装公共方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeNow</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> vWeek, vWeek_s, year, month, day, hours, minutes, seconds;<br>    vWeek = [<span class="hljs-string">&quot;星期天&quot;</span>, <span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;星期二&quot;</span>, <span class="hljs-string">&quot;星期三&quot;</span>, <span class="hljs-string">&quot;星期四&quot;</span>, <span class="hljs-string">&quot;星期五&quot;</span>, <span class="hljs-string">&quot;星期六&quot;</span>];<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    year = date.getFullYear();<br>    month = date.getMonth() + <span class="hljs-number">1</span>;<br>    day = date.getDate();<br>    hours = date.getHours();<br>    hours = hours &gt; <span class="hljs-number">9</span> ? hours : <span class="hljs-string">&quot;0&quot;</span> + hours;<br>    minutes = date.getMinutes();<br>    minutes = minutes &gt; <span class="hljs-number">9</span> ? minutes : <span class="hljs-string">&quot;0&quot;</span> + minutes;<br>    seconds = date.getSeconds();<br>    seconds = seconds &gt; <span class="hljs-number">9</span> ? seconds : <span class="hljs-string">&quot;0&quot;</span> + seconds;<br>    vWeek_s = date.getDay();<br>    <span class="hljs-keyword">let</span> time = year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + hours + <span class="hljs-string">&quot;:&quot;</span> + minutes + <span class="hljs-string">&quot;:&quot;</span> + seconds + <span class="hljs-string">&quot;\t&quot;</span> + vWeek[vWeek_s];<br>    <span class="hljs-keyword">return</span> time<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以根据需求更改展现格式</p></blockquote><hr><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><p>引入：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;  timeNow &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/getMaininfo&quot;</span>;<br></code></pre></td></tr></table></figure><p>从页面加载起，开始执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.tiemEq = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">/* 时间 */</span><br>      <span class="hljs-built_in">this</span>.nowTime = timeNow();<br>   &#125;, <span class="hljs-number">1000</span>);<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：这里给定时器生成定义，以便后续销毁</p></blockquote><hr><h4 id="3-销毁"><a href="#3-销毁" class="headerlink" title="3. 销毁"></a>3. 销毁</h4><p>由于定时器的特殊性，在关闭页面时，及时销毁，避免造成资源浪费甚至内存溢出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vue生命周期</span><br><span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-comment">/* 关闭页面销毁所有定时器 */</span><br>   <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.tiemEq);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
